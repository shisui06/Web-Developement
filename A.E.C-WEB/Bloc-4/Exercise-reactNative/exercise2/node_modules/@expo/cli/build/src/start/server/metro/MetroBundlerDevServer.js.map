{"version":3,"sources":["../../../../../src/start/server/metro/MetroBundlerDevServer.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getConfig } from '@expo/config';\nimport { getMetroServerRoot } from '@expo/config/paths';\nimport * as runtimeEnv from '@expo/env';\nimport { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport { DeltaResult, TransformInputOptions } from 'metro';\nimport baseJSBundle from 'metro/src/DeltaBundler/Serializers/baseJSBundle';\nimport {\n  sourceMapGeneratorNonBlocking,\n  type SourceMapGeneratorOptions,\n} from 'metro/src/DeltaBundler/Serializers/sourceMapGenerator';\nimport type MetroHmrServer from 'metro/src/HmrServer';\nimport type { Client as MetroHmrClient } from 'metro/src/HmrServer';\nimport { GraphRevision } from 'metro/src/IncrementalBundler';\nimport bundleToString from 'metro/src/lib/bundleToString';\nimport getGraphId from 'metro/src/lib/getGraphId';\nimport { TransformProfile } from 'metro-babel-transformer';\nimport type { CustomResolverOptions } from 'metro-resolver/src/types';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport {\n  createServerComponentsMiddleware,\n  fileURLToFilePath,\n} from './createServerComponentsMiddleware';\nimport { createRouteHandlerMiddleware } from './createServerRouteMiddleware';\nimport { ExpoRouterServerManifestV1, fetchManifest } from './fetchRouterManifest';\nimport { instantiateMetroAsync } from './instantiateMetro';\nimport { getErrorOverlayHtmlAsync } from './metroErrorInterface';\nimport { assertMetroPrivateServer, MetroPrivateServer } from './metroPrivateServer';\nimport { metroWatchTypeScriptFiles } from './metroWatchTypeScriptFiles';\nimport {\n  getRouterDirectoryModuleIdWithManifest,\n  hasWarnedAboutApiRoutes,\n  isApiRouteConvention,\n  warnInvalidWebOutput,\n} from './router';\nimport { serializeHtmlWithAssets } from './serializeHtml';\nimport { observeAnyFileChanges, observeFileChanges } from './waitForMetroToObserveTypeScriptFile';\nimport { BundleAssetWithFileHashes, ExportAssetMap } from '../../../export/saveAssets';\nimport { Log } from '../../../log';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\nimport { toPosixPath } from '../../../utils/filePath';\nimport { getFreePortAsync } from '../../../utils/port';\nimport { BundlerDevServer, BundlerStartOptions, DevServerInstance } from '../BundlerDevServer';\nimport {\n  cachedSourceMaps,\n  evalMetroAndWrapFunctions,\n  evalMetroNoHandling,\n} from '../getStaticRenderFunctions';\nimport { ContextModuleSourceMapsMiddleware } from '../middleware/ContextModuleSourceMapsMiddleware';\nimport { CreateFileMiddleware } from '../middleware/CreateFileMiddleware';\nimport { DevToolsPluginMiddleware } from '../middleware/DevToolsPluginMiddleware';\nimport { createDomComponentsMiddleware } from '../middleware/DomComponentsMiddleware';\nimport { FaviconMiddleware } from '../middleware/FaviconMiddleware';\nimport { HistoryFallbackMiddleware } from '../middleware/HistoryFallbackMiddleware';\nimport { InterstitialPageMiddleware } from '../middleware/InterstitialPageMiddleware';\nimport { resolveMainModuleName } from '../middleware/ManifestMiddleware';\nimport { ReactDevToolsPageMiddleware } from '../middleware/ReactDevToolsPageMiddleware';\nimport { RuntimeRedirectMiddleware } from '../middleware/RuntimeRedirectMiddleware';\nimport { ServeStaticMiddleware } from '../middleware/ServeStaticMiddleware';\nimport {\n  convertPathToModuleSpecifier,\n  createBundleUrlPath,\n  createBundleUrlOsPath,\n  ExpoMetroOptions,\n  getAsyncRoutesFromExpoConfig,\n  getBaseUrlFromExpoConfig,\n  getMetroDirectBundleOptions,\n  shouldEnableAsyncImports,\n} from '../middleware/metroOptions';\nimport { prependMiddleware } from '../middleware/mutations';\nimport { startTypescriptTypeGenerationAsync } from '../type-generation/startTypescriptTypeGeneration';\n\nexport type ExpoRouterRuntimeManifest = Awaited<\n  ReturnType<typeof import('expo-router/build/static/renderStaticContent').getManifest>\n>;\ntype MetroOnProgress = NonNullable<\n  import('metro/src/DeltaBundler/types').Options<void>['onProgress']\n>;\ntype SSRLoadModuleFunc = <T extends Record<string, any>>(\n  filePath: string,\n  specificOptions?: Partial<ExpoMetroOptions>,\n  extras?: { hot?: boolean }\n) => Promise<T>;\n\nconst debug = require('debug')('expo:start:server:metro') as typeof console.log;\n\n/** Default port to use for apps running in Expo Go. */\nconst EXPO_GO_METRO_PORT = 8081;\n\n/** Default port to use for apps that run in standard React Native projects or Expo Dev Clients. */\nconst DEV_CLIENT_METRO_PORT = 8081;\n\nexport class MetroBundlerDevServer extends BundlerDevServer {\n  private metro: MetroPrivateServer | null = null;\n  private hmrServer: MetroHmrServer | null = null;\n  private ssrHmrClients: Map<string, MetroHmrClient> = new Map();\n  isReactServerComponentsEnabled?: boolean;\n  isReactServerRoutesEnabled?: boolean;\n\n  get name(): string {\n    return 'metro';\n  }\n\n  async resolvePortAsync(options: Partial<BundlerStartOptions> = {}): Promise<number> {\n    const port =\n      // If the manually defined port is busy then an error should be thrown...\n      options.port ??\n      // Otherwise use the default port based on the runtime target.\n      (options.devClient\n        ? // Don't check if the port is busy if we're using the dev client since most clients are hardcoded to 8081.\n          Number(process.env.RCT_METRO_PORT) || DEV_CLIENT_METRO_PORT\n        : // Otherwise (running in Expo Go) use a free port that falls back on the classic 8081 port.\n          await getFreePortAsync(EXPO_GO_METRO_PORT));\n\n    return port;\n  }\n\n  async exportExpoRouterApiRoutesAsync({\n    includeSourceMaps,\n    outputDir,\n    prerenderManifest,\n    platform,\n  }: {\n    includeSourceMaps?: boolean;\n    outputDir: string;\n    // This does not contain the API routes info.\n    prerenderManifest: ExpoRouterServerManifestV1;\n    platform: string;\n  }): Promise<{ files: ExportAssetMap; manifest: ExpoRouterServerManifestV1<string> }> {\n    const { routerRoot } = this.instanceMetroOptions;\n    assert(\n      routerRoot != null,\n      'The server must be started before calling exportExpoRouterApiRoutesAsync.'\n    );\n\n    const appDir = path.join(this.projectRoot, routerRoot);\n    const manifest = await this.getExpoRouterRoutesManifestAsync({ appDir });\n\n    const files: ExportAssetMap = new Map();\n\n    // Inject RSC middleware.\n    const rscPath = '/_flight/[...rsc]';\n\n    if (\n      this.isReactServerComponentsEnabled &&\n      // If the RSC route is not already in the manifest, add it.\n      !manifest.apiRoutes.find((route) => route.page.startsWith('/_flight/'))\n    ) {\n      debug('Adding RSC route to the manifest:', rscPath);\n      // NOTE: This might need to be sorted to the correct spot in the future.\n      manifest.apiRoutes.push({\n        file: resolveFrom(this.projectRoot, '@expo/cli/static/template/[...rsc]+api.ts'),\n        page: rscPath,\n        namedRegex: '^/_flight(?:/(?<rsc>.+?))?(?:/)?$',\n        routeKeys: { rsc: 'rsc' },\n      });\n    }\n\n    for (const route of manifest.apiRoutes) {\n      const filepath = path.isAbsolute(route.file) ? route.file : path.join(appDir, route.file);\n      const contents = await this.bundleApiRoute(filepath, { platform });\n\n      const artifactFilename =\n        route.page === rscPath\n          ? // HACK: Add RSC renderer to the output...\n            path.join(outputDir, '.' + rscPath + '.js')\n          : path.join(outputDir, path.relative(appDir, filepath.replace(/\\.[tj]sx?$/, '.js')));\n\n      if (contents) {\n        let src = contents.src;\n\n        if (includeSourceMaps && contents.map) {\n          // TODO(kitten): Merge the source map transformer in the future\n          // https://github.com/expo/expo/blob/0dffdb15/packages/%40expo/metro-config/src/serializer/serializeChunks.ts#L422-L439\n          // Alternatively, check whether `sourcesRoot` helps here\n          const artifactBasename = encodeURIComponent(path.basename(artifactFilename) + '.map');\n          src = src.replace(\n            /\\/\\/# sourceMappingURL=.*/g,\n            `//# sourceMappingURL=${artifactBasename}`\n          );\n\n          const parsedMap =\n            typeof contents.map === 'string' ? JSON.parse(contents.map) : contents.map;\n          files.set(artifactFilename + '.map', {\n            contents: JSON.stringify({\n              version: parsedMap.version,\n              sources: parsedMap.sources.map((source: string) => {\n                source =\n                  typeof source === 'string' && source.startsWith(this.projectRoot)\n                    ? path.relative(this.projectRoot, source)\n                    : source;\n                return convertPathToModuleSpecifier(source);\n              }),\n              sourcesContent: new Array(parsedMap.sources.length).fill(null),\n              names: parsedMap.names,\n              mappings: parsedMap.mappings,\n            }),\n            apiRouteId: route.page,\n            targetDomain: 'server',\n          });\n        }\n        files.set(artifactFilename, {\n          contents: src,\n          apiRouteId: route.page,\n          targetDomain: 'server',\n        });\n      }\n      // Remap the manifest files to represent the output files.\n      route.file = artifactFilename;\n    }\n\n    return {\n      manifest: {\n        ...manifest,\n        htmlRoutes: prerenderManifest.htmlRoutes,\n      },\n      files,\n    };\n  }\n\n  async getExpoRouterRoutesManifestAsync({ appDir }: { appDir: string }) {\n    // getBuiltTimeServerManifest\n    const { exp } = getConfig(this.projectRoot);\n    const manifest = await fetchManifest(this.projectRoot, {\n      ...exp.extra?.router?.platformRoutes,\n      asJson: true,\n      appDir,\n    });\n\n    if (!manifest) {\n      throw new CommandError(\n        'EXPO_ROUTER_SERVER_MANIFEST',\n        'Unexpected error: server manifest could not be fetched.'\n      );\n    }\n\n    return manifest;\n  }\n\n  async getServerManifestAsync(): Promise<{\n    serverManifest: ExpoRouterServerManifestV1;\n  }> {\n    // NOTE: This could probably be folded back into `renderStaticContent` when expo-asset and font support RSC.\n    const { getBuildTimeServerManifestAsync } = await this.ssrLoadModule<\n      typeof import('expo-router/build/static/getServerManifest')\n    >('expo-router/build/static/getServerManifest.js', {\n      // Only use react-server environment when the routes are using react-server rendering by default.\n      environment: this.isReactServerRoutesEnabled ? 'react-server' : 'node',\n    });\n\n    return {\n      serverManifest: await getBuildTimeServerManifestAsync(),\n    };\n  }\n\n  async getStaticRenderFunctionAsync(): Promise<{\n    serverManifest: ExpoRouterServerManifestV1;\n    manifest: ExpoRouterRuntimeManifest;\n    renderAsync: (path: string) => Promise<string>;\n  }> {\n    const url = this.getDevServerUrlOrAssert();\n\n    const { getStaticContent, getManifest, getBuildTimeServerManifestAsync } =\n      await this.ssrLoadModule<typeof import('expo-router/build/static/renderStaticContent')>(\n        'expo-router/node/render.js',\n        {\n          // This must always use the legacy rendering resolution (no `react-server`) because it leverages\n          // the previous React SSG utilities which aren't available in React 19.\n          environment: 'node',\n        }\n      );\n\n    const { exp } = getConfig(this.projectRoot);\n\n    return {\n      serverManifest: await getBuildTimeServerManifestAsync(),\n      // Get routes from Expo Router.\n      manifest: await getManifest({ preserveApiRoutes: false, ...exp.extra?.router }),\n      // Get route generating function\n      async renderAsync(path: string) {\n        return await getStaticContent(new URL(path, url));\n      },\n    };\n  }\n\n  async getStaticResourcesAsync({\n    includeSourceMaps,\n    mainModuleName,\n    clientBoundaries = this.instanceMetroOptions.clientBoundaries ?? [],\n    platform = 'web',\n  }: {\n    includeSourceMaps?: boolean;\n    mainModuleName?: string;\n    clientBoundaries?: string[];\n    platform?: string;\n  } = {}) {\n    const { mode, minify, isExporting, baseUrl, reactCompiler, routerRoot, asyncRoutes } =\n      this.instanceMetroOptions;\n    assert(\n      mode != null &&\n        isExporting != null &&\n        baseUrl != null &&\n        routerRoot != null &&\n        reactCompiler != null &&\n        asyncRoutes != null,\n      'The server must be started before calling getStaticResourcesAsync.'\n    );\n\n    const resolvedMainModuleName =\n      mainModuleName ?? './' + resolveMainModuleName(this.projectRoot, { platform });\n    return await this.metroImportAsArtifactsAsync(resolvedMainModuleName, {\n      splitChunks: isExporting && !env.EXPO_NO_BUNDLE_SPLITTING,\n      platform,\n      mode,\n      minify,\n      environment: 'client',\n      serializerIncludeMaps: includeSourceMaps,\n      mainModuleName: resolvedMainModuleName,\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      asyncRoutes,\n      baseUrl,\n      isExporting,\n      routerRoot,\n      clientBoundaries,\n      reactCompiler,\n      bytecode: false,\n    });\n  }\n\n  private async getStaticPageAsync(pathname: string) {\n    const { mode, isExporting, clientBoundaries, baseUrl, reactCompiler, routerRoot, asyncRoutes } =\n      this.instanceMetroOptions;\n    assert(\n      mode != null &&\n        isExporting != null &&\n        baseUrl != null &&\n        reactCompiler != null &&\n        routerRoot != null &&\n        asyncRoutes != null,\n      'The server must be started before calling getStaticPageAsync.'\n    );\n    const platform = 'web';\n\n    const devBundleUrlPathname = createBundleUrlPath({\n      splitChunks: isExporting && !env.EXPO_NO_BUNDLE_SPLITTING,\n      platform,\n      mode,\n      environment: 'client',\n      reactCompiler,\n      mainModuleName: resolveMainModuleName(this.projectRoot, { platform }),\n      lazy: shouldEnableAsyncImports(this.projectRoot),\n      baseUrl,\n      isExporting,\n      asyncRoutes,\n      routerRoot,\n      clientBoundaries,\n      bytecode: false,\n    });\n\n    const bundleStaticHtml = async (): Promise<string> => {\n      const { getStaticContent } = await this.ssrLoadModule<\n        typeof import('expo-router/build/static/renderStaticContent')\n      >('expo-router/node/render.js', {\n        // This must always use the legacy rendering resolution (no `react-server`) because it leverages\n        // the previous React SSG utilities which aren't available in React 19.\n        environment: 'node',\n        minify: false,\n        isExporting,\n        platform,\n      });\n\n      const location = new URL(pathname, this.getDevServerUrlOrAssert());\n      return await getStaticContent(location);\n    };\n\n    const [{ artifacts: resources }, staticHtml] = await Promise.all([\n      this.getStaticResourcesAsync({\n        clientBoundaries: [],\n      }),\n      bundleStaticHtml(),\n    ]);\n    const content = serializeHtmlWithAssets({\n      isExporting,\n      resources,\n      template: staticHtml,\n      devBundleUrl: devBundleUrlPathname,\n      baseUrl,\n      hydrate: env.EXPO_WEB_DEV_HYDRATE,\n    });\n    return {\n      content,\n      resources,\n    };\n  }\n\n  // Set when the server is started.\n  private instanceMetroOptions: Partial<ExpoMetroOptions> = {};\n\n  private ssrLoadModule: SSRLoadModuleFunc = async (\n    filePath,\n    specificOptions = {},\n    extras = {}\n  ) => {\n    const res = await this.ssrLoadModuleContents(filePath, specificOptions);\n\n    if (extras.hot && this.instanceMetroOptions.isExporting !== true) {\n      // Register SSR HMR\n      const serverRoot = getMetroServerRoot(this.projectRoot);\n      const relativePath = path.relative(serverRoot, res.filename);\n      const url = new URL(relativePath, this.getDevServerUrlOrAssert());\n      this.setupHmr(url);\n    }\n\n    return evalMetroAndWrapFunctions(\n      this.projectRoot,\n      res.src,\n      res.filename,\n      specificOptions.isExporting ?? this.instanceMetroOptions.isExporting!\n    );\n  };\n\n  private async metroImportAsArtifactsAsync(\n    filePath: string,\n    specificOptions: Partial<Omit<ExpoMetroOptions, 'serializerOutput'>> = {}\n  ) {\n    const results = await this.ssrLoadModuleContents(filePath, {\n      serializerOutput: 'static',\n      ...specificOptions,\n    });\n\n    // NOTE: This could potentially need more validation in the future.\n    if (results.artifacts && results.assets) {\n      return {\n        artifacts: results.artifacts,\n        assets: results.assets,\n        src: results.src,\n        filename: results.filename,\n        map: results.map,\n      };\n    }\n    throw new CommandError('Invalid bundler results: ' + results);\n  }\n\n  private async metroLoadModuleContents(\n    filePath: string,\n    specificOptions: ExpoMetroOptions,\n    extraOptions: {\n      sourceMapUrl?: string;\n      unstable_transformProfile?: TransformProfile;\n    } = {}\n  ) {\n    const { baseUrl } = this.instanceMetroOptions;\n    assert(baseUrl != null, 'The server must be started before calling metroLoadModuleContents.');\n\n    const opts: ExpoMetroOptions = {\n      // TODO: Possibly issues with using an absolute path here...\n      // mainModuleName: filePath,\n      lazy: false,\n      asyncRoutes: false,\n      inlineSourceMap: false,\n      engine: 'hermes',\n      minify: false,\n      // bytecode: false,\n      // Bundle in Node.js mode for SSR.\n      environment: 'node',\n      // platform: 'web',\n      // mode: 'development',\n      //\n      ...this.instanceMetroOptions,\n      baseUrl,\n      // routerRoot,\n      // isExporting,\n      ...specificOptions,\n    };\n\n    const expoBundleOptions = getMetroDirectBundleOptions(opts);\n\n    const resolverOptions = {\n      customResolverOptions: expoBundleOptions.customResolverOptions ?? {},\n      dev: expoBundleOptions.dev ?? true,\n    };\n\n    const transformOptions: TransformInputOptions = {\n      dev: expoBundleOptions.dev ?? true,\n      hot: true,\n      minify: expoBundleOptions.minify ?? false,\n      type: 'module',\n      unstable_transformProfile:\n        extraOptions.unstable_transformProfile ??\n        expoBundleOptions.unstable_transformProfile ??\n        'default',\n      customTransformOptions: expoBundleOptions.customTransformOptions ?? Object.create(null),\n      platform: expoBundleOptions.platform ?? 'web',\n      // @ts-expect-error: `runtimeBytecodeVersion` does not exist in `expoBundleOptions` or `TransformInputOptions`\n      runtimeBytecodeVersion: expoBundleOptions.runtimeBytecodeVersion,\n    };\n\n    const resolvedEntryFilePath = await this.resolveRelativePathAsync(filePath, {\n      resolverOptions,\n      transformOptions,\n    });\n\n    // Use fully qualified URL with all options to represent the file path that's used for source maps and HMR. This prevents collisions.\n    const filename = createBundleUrlOsPath({\n      ...opts,\n      mainModuleName: resolvedEntryFilePath,\n    });\n\n    // https://github.com/facebook/metro/blob/2405f2f6c37a1b641cc379b9c733b1eff0c1c2a1/packages/metro/src/lib/parseOptionsFromUrl.js#L55-L87\n    const results = await this._bundleDirectAsync(resolvedEntryFilePath, {\n      graphOptions: {\n        lazy: expoBundleOptions.lazy ?? false,\n        shallow: expoBundleOptions.shallow ?? false,\n      },\n      resolverOptions,\n      serializerOptions: {\n        ...expoBundleOptions.serializerOptions,\n\n        inlineSourceMap: expoBundleOptions.inlineSourceMap ?? false,\n        modulesOnly: expoBundleOptions.modulesOnly ?? false,\n        runModule: expoBundleOptions.runModule ?? true,\n        // @ts-expect-error\n        sourceUrl: expoBundleOptions.sourceUrl,\n        // @ts-expect-error\n        sourceMapUrl: extraOptions.sourceMapUrl ?? expoBundleOptions.sourceMapUrl,\n      },\n      transformOptions,\n    });\n\n    return {\n      ...results,\n      filename,\n    };\n  }\n\n  private async ssrLoadModuleContents(\n    filePath: string,\n    specificOptions: Partial<ExpoMetroOptions> = {}\n  ) {\n    const { baseUrl, routerRoot, isExporting } = this.instanceMetroOptions;\n    assert(\n      baseUrl != null && routerRoot != null && isExporting != null,\n      'The server must be started before calling ssrLoadModuleContents.'\n    );\n\n    const opts: ExpoMetroOptions = {\n      // TODO: Possibly issues with using an absolute path here...\n      mainModuleName: convertPathToModuleSpecifier(filePath),\n      lazy: false,\n      asyncRoutes: false,\n      inlineSourceMap: false,\n      engine: 'hermes',\n      minify: false,\n      bytecode: false,\n      // Bundle in Node.js mode for SSR unless RSC is enabled.\n      environment: this.isReactServerComponentsEnabled ? 'react-server' : 'node',\n      platform: 'web',\n      mode: 'development',\n      //\n      ...this.instanceMetroOptions,\n\n      // Mostly disable compiler in SSR bundles.\n      reactCompiler: false,\n      baseUrl,\n      routerRoot,\n      isExporting,\n\n      ...specificOptions,\n    };\n\n    // https://github.com/facebook/metro/blob/2405f2f6c37a1b641cc379b9c733b1eff0c1c2a1/packages/metro/src/lib/parseOptionsFromUrl.js#L55-L87\n    const { filename, bundle, map, ...rest } = await this.metroLoadModuleContents(filePath, opts);\n    const scriptContents = wrapBundle(bundle);\n\n    if (map) {\n      debug('Registering SSR source map for:', filename);\n      cachedSourceMaps.set(filename, { url: this.projectRoot, map });\n    } else {\n      debug('No SSR source map found for:', filename);\n    }\n\n    return {\n      ...rest,\n      src: scriptContents,\n      filename,\n      map,\n    };\n  }\n\n  async nativeExportBundleAsync(\n    options: Omit<\n      ExpoMetroOptions,\n      'routerRoot' | 'asyncRoutes' | 'isExporting' | 'serializerOutput' | 'environment'\n    >,\n    files: ExportAssetMap,\n    extraOptions: {\n      sourceMapUrl?: string;\n      unstable_transformProfile?: TransformProfile;\n    } = {}\n  ): Promise<{\n    artifacts: SerialAsset[];\n    assets: readonly BundleAssetWithFileHashes[];\n    files?: ExportAssetMap;\n  }> {\n    if (this.isReactServerComponentsEnabled) {\n      return this.singlePageReactServerComponentExportAsync(options, files, extraOptions);\n    }\n\n    return this.legacySinglePageExportBundleAsync(options, extraOptions);\n  }\n\n  private async singlePageReactServerComponentExportAsync(\n    options: Omit<\n      ExpoMetroOptions,\n      'baseUrl' | 'routerRoot' | 'asyncRoutes' | 'isExporting' | 'serializerOutput' | 'environment'\n    >,\n    files: ExportAssetMap,\n    extraOptions: {\n      sourceMapUrl?: string;\n      unstable_transformProfile?: TransformProfile;\n    } = {}\n  ): Promise<{\n    artifacts: SerialAsset[];\n    assets: readonly BundleAssetWithFileHashes[];\n    files: ExportAssetMap;\n  }> {\n    // NOTE(EvanBacon): This will not support any code elimination since it's a static pass.\n    let {\n      reactClientReferences: clientBoundaries,\n      reactServerReferences: serverActionReferencesInServer,\n      cssModules,\n    } = await this.rscRenderer!.getExpoRouterClientReferencesAsync(\n      {\n        platform: options.platform,\n        domRoot: options.domRoot,\n      },\n      files\n    );\n\n    // TODO: The output keys should be in production format or use a lookup manifest.\n\n    debug('Evaluated client boundaries:', clientBoundaries);\n\n    // Run metro bundler and create the JS bundles/source maps.\n    let bundle = await this.legacySinglePageExportBundleAsync(\n      {\n        ...options,\n        clientBoundaries,\n      },\n      extraOptions\n    );\n\n    // Get the React server action boundaries from the client bundle.\n    const reactServerReferences = bundle.artifacts\n      .filter((a) => a.type === 'js')\n      .map((artifact) =>\n        artifact.metadata.reactServerReferences?.map((ref) => fileURLToFilePath(ref))\n      )\n      // TODO: Segment by module for splitting.\n      .flat()\n      .filter(Boolean) as string[];\n\n    if (!reactServerReferences) {\n      // Issue with babel plugin / metro-config.\n      throw new Error(\n        'Static server action references were not returned from the Metro client bundle'\n      );\n    }\n\n    debug('React server action boundaries from client:', reactServerReferences);\n\n    // When we export the server actions that were imported from the client, we may need to re-bundle the client with the new client boundaries.\n    const { clientBoundaries: nestedClientBoundaries } =\n      await this.rscRenderer!.exportServerActionsAsync(\n        {\n          platform: options.platform,\n          domRoot: options.domRoot,\n          entryPoints: [...serverActionReferencesInServer, ...reactServerReferences],\n        },\n        files\n      );\n\n    // TODO: Check against all modules in the initial client bundles.\n    const hasUniqueClientBoundaries = nestedClientBoundaries.some(\n      (boundary) => !clientBoundaries.includes(boundary)\n    );\n\n    if (hasUniqueClientBoundaries) {\n      debug('Re-bundling client with nested client boundaries:', nestedClientBoundaries);\n      clientBoundaries = [...new Set(clientBoundaries.concat(nestedClientBoundaries))];\n      // Re-bundle the client with the new client boundaries that only exist in server actions that were imported from the client.\n      // Run metro bundler and create the JS bundles/source maps.\n      bundle = await this.legacySinglePageExportBundleAsync(\n        {\n          ...options,\n          clientBoundaries,\n        },\n        extraOptions\n      );\n    }\n\n    // Inject the global CSS that was imported during the server render.\n    bundle.artifacts.push(...cssModules);\n\n    const serverRoot = getMetroServerRoot(this.projectRoot);\n\n    // HACK: Maybe this should be done in the serializer.\n    const clientBoundariesAsOpaqueIds = clientBoundaries.map((boundary) =>\n      // NOTE(cedric): relative module specifiers / IDs should always be POSIX formatted\n      toPosixPath(path.relative(serverRoot, boundary))\n    );\n    const moduleIdToSplitBundle = (\n      bundle.artifacts\n        .map((artifact) => artifact?.metadata?.paths && Object.values(artifact.metadata.paths))\n        .filter(Boolean)\n        .flat() as Record<string, string>[]\n    ).reduce((acc, paths) => ({ ...acc, ...paths }), {});\n\n    debug('SSR Manifest:', moduleIdToSplitBundle, clientBoundariesAsOpaqueIds);\n\n    const ssrManifest = new Map<string, string>();\n\n    if (Object.keys(moduleIdToSplitBundle).length) {\n      clientBoundariesAsOpaqueIds.forEach((boundary) => {\n        if (boundary in moduleIdToSplitBundle) {\n          ssrManifest.set(boundary, moduleIdToSplitBundle[boundary]);\n        } else {\n          throw new Error(\n            `Could not find boundary \"${boundary}\" in the SSR manifest. Available: ${Object.keys(moduleIdToSplitBundle).join(', ')}`\n          );\n        }\n      });\n    } else {\n      // Native apps with bundle splitting disabled.\n      debug('No split bundles');\n      clientBoundariesAsOpaqueIds.forEach((boundary) => {\n        // @ts-expect-error\n        ssrManifest.set(boundary, null);\n      });\n    }\n\n    // Export the static RSC files\n    await this.rscRenderer!.exportRoutesAsync(\n      {\n        platform: options.platform,\n        ssrManifest,\n      },\n      files\n    );\n\n    // Save the SSR manifest so we can perform more replacements in the server renderer and with server actions.\n    files.set(`_expo/rsc/${options.platform}/ssr-manifest.js`, {\n      targetDomain: 'server',\n      contents:\n        'module.exports = ' +\n        JSON.stringify(\n          // TODO: Add a less leaky version of this across the framework with just [key, value] (module ID, chunk).\n          Object.fromEntries(\n            Array.from(ssrManifest.entries()).map(([key, value]) => [\n              path.join(serverRoot, key),\n              [key, value],\n            ])\n          )\n        ),\n    });\n\n    return { ...bundle, files };\n  }\n\n  async legacySinglePageExportBundleAsync(\n    options: Omit<\n      ExpoMetroOptions,\n      'routerRoot' | 'asyncRoutes' | 'isExporting' | 'serializerOutput' | 'environment'\n    >,\n    extraOptions: {\n      sourceMapUrl?: string;\n      unstable_transformProfile?: TransformProfile;\n    } = {}\n  ): Promise<{ artifacts: SerialAsset[]; assets: readonly BundleAssetWithFileHashes[] }> {\n    const { baseUrl, routerRoot, isExporting } = this.instanceMetroOptions;\n    assert(options.mainModuleName != null, 'mainModuleName must be provided in options.');\n    assert(\n      baseUrl != null && routerRoot != null && isExporting != null,\n      'The server must be started before calling legacySinglePageExportBundleAsync.'\n    );\n\n    const opts: ExpoMetroOptions = {\n      ...this.instanceMetroOptions,\n      baseUrl,\n      routerRoot,\n      isExporting,\n      ...options,\n      environment: 'client',\n      serializerOutput: 'static',\n    };\n\n    // https://github.com/facebook/metro/blob/2405f2f6c37a1b641cc379b9c733b1eff0c1c2a1/packages/metro/src/lib/parseOptionsFromUrl.js#L55-L87\n    if (!opts.mainModuleName.startsWith('/') && !path.isAbsolute(opts.mainModuleName)) {\n      opts.mainModuleName = './' + opts.mainModuleName;\n    }\n\n    const output = await this.metroLoadModuleContents(opts.mainModuleName, opts, extraOptions);\n\n    return {\n      artifacts: output.artifacts!,\n      assets: output.assets!,\n    };\n  }\n\n  async watchEnvironmentVariables() {\n    if (!this.instance) {\n      throw new Error(\n        'Cannot observe environment variable changes without a running Metro instance.'\n      );\n    }\n    if (!this.metro) {\n      // This can happen when the run command is used and the server is already running in another\n      // process.\n      debug('Skipping Environment Variable observation because Metro is not running (headless).');\n      return;\n    }\n\n    const envFiles = runtimeEnv\n      .getFiles(process.env.NODE_ENV)\n      .map((fileName) => path.join(this.projectRoot, fileName));\n\n    observeFileChanges(\n      {\n        metro: this.metro,\n        server: this.instance.server,\n      },\n      envFiles,\n      () => {\n        debug('Reloading environment variables...');\n        // Force reload the environment variables.\n        runtimeEnv.load(this.projectRoot, { force: true });\n      }\n    );\n  }\n\n  rscRenderer: Awaited<ReturnType<typeof createServerComponentsMiddleware>> | null = null;\n\n  protected async startImplementationAsync(\n    options: BundlerStartOptions\n  ): Promise<DevServerInstance> {\n    options.port = await this.resolvePortAsync(options);\n    this.urlCreator = this.getUrlCreator(options);\n\n    const config = getConfig(this.projectRoot, { skipSDKVersionRequirement: true });\n    const { exp } = config;\n    // NOTE: This will change in the future when it's less experimental, we enable React 19, and turn on more RSC flags by default.\n    const isReactServerComponentsEnabled =\n      !!exp.experiments?.reactServerComponentRoutes || !!exp.experiments?.reactServerFunctions;\n    const isReactServerActionsOnlyEnabled =\n      !exp.experiments?.reactServerComponentRoutes && !!exp.experiments?.reactServerFunctions;\n    this.isReactServerComponentsEnabled = isReactServerComponentsEnabled;\n    this.isReactServerRoutesEnabled = !!exp.experiments?.reactServerComponentRoutes;\n\n    const useServerRendering = ['static', 'server'].includes(exp.web?.output ?? '');\n    const hasApiRoutes = isReactServerComponentsEnabled || exp.web?.output === 'server';\n    const baseUrl = getBaseUrlFromExpoConfig(exp);\n    const asyncRoutes = getAsyncRoutesFromExpoConfig(exp, options.mode ?? 'development', 'web');\n    const routerRoot = getRouterDirectoryModuleIdWithManifest(this.projectRoot, exp);\n    const reactCompiler = !!exp.experiments?.reactCompiler;\n    const appDir = path.join(this.projectRoot, routerRoot);\n    const mode = options.mode ?? 'development';\n\n    if (isReactServerComponentsEnabled && useServerRendering) {\n      throw new CommandError(\n        `Experimental server component support does not support 'web.output: ${exp.web!.output}' yet. Use 'web.output: \"single\"' during the experimental phase.`\n      );\n    }\n\n    const instanceMetroOptions = {\n      isExporting: !!options.isExporting,\n      baseUrl,\n      mode,\n      routerRoot,\n      reactCompiler,\n      minify: options.minify,\n      asyncRoutes,\n      // Options that are changing between platforms like engine, platform, and environment aren't set here.\n    };\n    this.instanceMetroOptions = instanceMetroOptions;\n\n    const parsedOptions = {\n      port: options.port,\n      maxWorkers: options.maxWorkers,\n      resetCache: options.resetDevServer,\n    };\n\n    // Required for symbolication:\n    process.env.EXPO_DEV_SERVER_ORIGIN = `http://localhost:${options.port}`;\n\n    const { metro, hmrServer, server, middleware, messageSocket } = await instantiateMetroAsync(\n      this,\n      parsedOptions,\n      {\n        isExporting: !!options.isExporting,\n        exp,\n      }\n    );\n\n    if (!options.isExporting) {\n      const manifestMiddleware = await this.getManifestMiddlewareAsync(options);\n\n      // Important that we noop source maps for context modules as soon as possible.\n      prependMiddleware(middleware, new ContextModuleSourceMapsMiddleware().getHandler());\n\n      // We need the manifest handler to be the first middleware to run so our\n      // routes take precedence over static files. For example, the manifest is\n      // served from '/' and if the user has an index.html file in their project\n      // then the manifest handler will never run, the static middleware will run\n      // and serve index.html instead of the manifest.\n      // https://github.com/expo/expo/issues/13114\n      prependMiddleware(middleware, manifestMiddleware.getHandler());\n\n      middleware.use(\n        new InterstitialPageMiddleware(this.projectRoot, {\n          // TODO: Prevent this from becoming stale.\n          scheme: options.location.scheme ?? null,\n        }).getHandler()\n      );\n      middleware.use(new ReactDevToolsPageMiddleware(this.projectRoot).getHandler());\n      middleware.use(\n        new DevToolsPluginMiddleware(this.projectRoot, this.devToolsPluginManager).getHandler()\n      );\n\n      const deepLinkMiddleware = new RuntimeRedirectMiddleware(this.projectRoot, {\n        getLocation: ({ runtime }) => {\n          if (runtime === 'custom') {\n            return this.urlCreator?.constructDevClientUrl();\n          } else {\n            return this.urlCreator?.constructUrl({\n              scheme: 'exp',\n            });\n          }\n        },\n      });\n      middleware.use(deepLinkMiddleware.getHandler());\n\n      const serverRoot = getMetroServerRoot(this.projectRoot);\n\n      const domComponentRenderer = createDomComponentsMiddleware(\n        {\n          metroRoot: serverRoot,\n          projectRoot: this.projectRoot,\n        },\n        instanceMetroOptions\n      );\n      // Add support for DOM components.\n      // TODO: Maybe put behind a flag for now?\n      middleware.use(domComponentRenderer);\n\n      middleware.use(new CreateFileMiddleware(this.projectRoot).getHandler());\n\n      // Append support for redirecting unhandled requests to the index.html page on web.\n      if (this.isTargetingWeb()) {\n        // This MUST be after the manifest middleware so it doesn't have a chance to serve the template `public/index.html`.\n        middleware.use(new ServeStaticMiddleware(this.projectRoot).getHandler());\n\n        // This should come after the static middleware so it doesn't serve the favicon from `public/favicon.ico`.\n        middleware.use(new FaviconMiddleware(this.projectRoot).getHandler());\n      }\n\n      if (useServerRendering || isReactServerComponentsEnabled) {\n        observeAnyFileChanges(\n          {\n            metro,\n            server,\n          },\n          (events) => {\n            if (hasApiRoutes) {\n              // NOTE(EvanBacon): We aren't sure what files the API routes are using so we'll just invalidate\n              // aggressively to ensure we always have the latest. The only caching we really get here is for\n              // cases where the user is making subsequent requests to the same API route without changing anything.\n              // This is useful for testing but pretty suboptimal. Luckily our caching is pretty aggressive so it makes\n              // up for a lot of the overhead.\n              this.invalidateApiRouteCache();\n            } else if (!hasWarnedAboutApiRoutes()) {\n              for (const event of events) {\n                if (\n                  // If the user did not delete a file that matches the Expo Router API Route convention, then we should warn that\n                  // API Routes are not enabled in the project.\n                  event.metadata?.type !== 'd' &&\n                  // Ensure the file is in the project's routes directory to prevent false positives in monorepos.\n                  event.filePath.startsWith(appDir) &&\n                  isApiRouteConvention(event.filePath)\n                ) {\n                  warnInvalidWebOutput();\n                }\n              }\n            }\n          }\n        );\n      }\n\n      // If React 19 is enabled, then add RSC middleware to the dev server.\n      if (isReactServerComponentsEnabled) {\n        this.bindRSCDevModuleInjectionHandler();\n        const rscMiddleware = createServerComponentsMiddleware(this.projectRoot, {\n          instanceMetroOptions: this.instanceMetroOptions,\n          rscPath: '/_flight',\n          ssrLoadModule: this.ssrLoadModule.bind(this),\n          ssrLoadModuleArtifacts: this.metroImportAsArtifactsAsync.bind(this),\n          useClientRouter: isReactServerActionsOnlyEnabled,\n          createModuleId: metro._createModuleId.bind(metro),\n        });\n        this.rscRenderer = rscMiddleware;\n        middleware.use(rscMiddleware.middleware);\n        this.onReloadRscEvent = rscMiddleware.onReloadRscEvent;\n      }\n\n      // Append support for redirecting unhandled requests to the index.html page on web.\n      if (this.isTargetingWeb()) {\n        if (!useServerRendering || isReactServerComponentsEnabled) {\n          // This MUST run last since it's the fallback.\n          middleware.use(\n            new HistoryFallbackMiddleware(manifestMiddleware.getHandler().internal).getHandler()\n          );\n        } else {\n          middleware.use(\n            createRouteHandlerMiddleware(this.projectRoot, {\n              appDir,\n              routerRoot,\n              config,\n              ...config.exp.extra?.router,\n              bundleApiRoute: (functionFilePath) =>\n                this.ssrImportApiRoute(functionFilePath, { platform: 'web' }),\n              getStaticPageAsync: (pathname) => {\n                return this.getStaticPageAsync(pathname);\n              },\n            })\n          );\n        }\n      }\n    } else {\n      // If React 19 is enabled, then add RSC middleware to the dev server.\n      if (isReactServerComponentsEnabled) {\n        this.bindRSCDevModuleInjectionHandler();\n        const rscMiddleware = createServerComponentsMiddleware(this.projectRoot, {\n          instanceMetroOptions: this.instanceMetroOptions,\n          rscPath: '/_flight',\n          ssrLoadModule: this.ssrLoadModule.bind(this),\n          ssrLoadModuleArtifacts: this.metroImportAsArtifactsAsync.bind(this),\n          useClientRouter: isReactServerActionsOnlyEnabled,\n          createModuleId: metro._createModuleId.bind(metro),\n        });\n        this.rscRenderer = rscMiddleware;\n      }\n    }\n    // Extend the close method to ensure that we clean up the local info.\n    const originalClose = server.close.bind(server);\n\n    server.close = (callback?: (err?: Error) => void) => {\n      return originalClose((err?: Error) => {\n        this.instance = null;\n        this.metro = null;\n        this.hmrServer = null;\n        this.ssrHmrClients = new Map();\n        callback?.(err);\n      });\n    };\n\n    assertMetroPrivateServer(metro);\n    this.metro = metro;\n    this.hmrServer = hmrServer;\n    return {\n      server,\n      location: {\n        // The port is the main thing we want to send back.\n        port: options.port,\n        // localhost isn't always correct.\n        host: 'localhost',\n        // http is the only supported protocol on native.\n        url: `http://localhost:${options.port}`,\n        protocol: 'http',\n      },\n      middleware,\n      messageSocket,\n    };\n  }\n\n  private onReloadRscEvent: (() => void) | null = null;\n\n  private async registerSsrHmrAsync(url: string, onReload: () => void) {\n    if (!this.hmrServer || this.ssrHmrClients.has(url)) {\n      return;\n    }\n\n    debug('[SSR] Register HMR:', url);\n\n    const sendFn = (message: string) => {\n      const data = JSON.parse(String(message)) as { type: string; body: any };\n\n      switch (data.type) {\n        case 'bundle-registered':\n        case 'update-done':\n        case 'update-start':\n          break;\n        case 'update':\n          {\n            const update = data.body;\n            const {\n              isInitialUpdate,\n              added,\n              modified,\n              deleted,\n            }: {\n              isInitialUpdate?: boolean;\n              added: {\n                module: [number | string, string];\n                sourceURL: string;\n                sourceMappingURL: string;\n              }[];\n              modified: {\n                module: [number | string, string];\n                sourceURL: string;\n                sourceMappingURL: string;\n              }[];\n              deleted: (number | string)[];\n            } = update;\n\n            const hasUpdate = added.length || modified.length || deleted.length;\n\n            // NOTE: We throw away the updates and instead simply send a trigger to the client to re-fetch the server route.\n            if (!isInitialUpdate && hasUpdate) {\n              // Clear all SSR modules before sending the reload event. This ensures that the next event will rebuild the in-memory state from scratch.\n              // @ts-expect-error: __c is not on global but is injected by Metro.\n              if (typeof globalThis.__c === 'function') globalThis.__c();\n\n              onReload();\n            }\n          }\n          break;\n        case 'error':\n          // GraphNotFound can mean that we have an issue in metroOptions where the URL doesn't match the object props.\n          Log.error('[SSR] HMR Error: ' + JSON.stringify(data, null, 2));\n\n          if (data.body?.type === 'GraphNotFoundError') {\n            Log.error(\n              'Available SSR HMR keys:',\n              // @ts-expect-error\n              (this.metro?._bundler._revisionsByGraphId as Map).keys()\n            );\n          }\n          break;\n        default:\n          debug('Unknown HMR message:', data);\n          break;\n      }\n    };\n\n    const client = await this.hmrServer!.onClientConnect(url, sendFn);\n    this.ssrHmrClients.set(url, client);\n    // Opt in...\n    client.optedIntoHMR = true;\n    await this.hmrServer!._registerEntryPoint(client, url, sendFn);\n  }\n\n  public async waitForTypeScriptAsync(): Promise<boolean> {\n    if (!this.instance) {\n      throw new Error('Cannot wait for TypeScript without a running server.');\n    }\n\n    return new Promise<boolean>((resolve) => {\n      if (!this.metro) {\n        // This can happen when the run command is used and the server is already running in another\n        // process. In this case we can't wait for the TypeScript check to complete because we don't\n        // have access to the Metro server.\n        debug('Skipping TypeScript check because Metro is not running (headless).');\n        return resolve(false);\n      }\n\n      const off = metroWatchTypeScriptFiles({\n        projectRoot: this.projectRoot,\n        server: this.instance!.server,\n        metro: this.metro,\n        tsconfig: true,\n        throttle: true,\n        eventTypes: ['change', 'add'],\n        callback: async () => {\n          // Run once, this prevents the TypeScript project prerequisite from running on every file change.\n          off();\n          const { TypeScriptProjectPrerequisite } = await import(\n            '../../doctor/typescript/TypeScriptProjectPrerequisite.js'\n          );\n\n          try {\n            const req = new TypeScriptProjectPrerequisite(this.projectRoot);\n            await req.bootstrapAsync();\n            resolve(true);\n          } catch (error: any) {\n            // Ensure the process doesn't fail if the TypeScript check fails.\n            // This could happen during the install.\n            Log.log();\n            Log.error(\n              chalk.red`Failed to automatically setup TypeScript for your project. Try restarting the dev server to fix.`\n            );\n            Log.exception(error);\n            resolve(false);\n          }\n        },\n      });\n    });\n  }\n\n  public async startTypeScriptServices() {\n    return startTypescriptTypeGenerationAsync({\n      server: this.instance?.server,\n      metro: this.metro,\n      projectRoot: this.projectRoot,\n    });\n  }\n\n  protected getConfigModuleIds(): string[] {\n    return ['./metro.config.js', './metro.config.json', './rn-cli.config.js'];\n  }\n\n  // API Routes\n\n  private pendingRouteOperations = new Map<\n    string,\n    Promise<{ src: string; filename: string; map: string } | null>\n  >();\n\n  // Bundle the API Route with Metro and return the string contents to be evaluated in the server.\n  private async bundleApiRoute(\n    filePath: string,\n    { platform }: { platform: string }\n  ): Promise<{ src: string; filename: string; map?: any } | null | undefined> {\n    if (this.pendingRouteOperations.has(filePath)) {\n      return this.pendingRouteOperations.get(filePath);\n    }\n    const bundleAsync = async () => {\n      try {\n        debug('Bundle API route:', this.instanceMetroOptions.routerRoot, filePath);\n        return await this.ssrLoadModuleContents(filePath, {\n          isExporting: this.instanceMetroOptions.isExporting,\n          platform,\n        });\n      } catch (error: any) {\n        const appDir = this.instanceMetroOptions?.routerRoot\n          ? path.join(this.projectRoot, this.instanceMetroOptions!.routerRoot!)\n          : undefined;\n        const relativePath = appDir ? path.relative(appDir, filePath) : filePath;\n\n        // Expected errors: invalid syntax, missing resolutions.\n        // Wrap with command error for better error messages.\n        const err = new CommandError(\n          'API_ROUTE',\n          chalk`Failed to bundle API Route: {bold ${relativePath}}\\n\\n` + error.message\n        );\n\n        for (const key in error) {\n          // @ts-expect-error\n          err[key] = error[key];\n        }\n\n        throw err;\n      } finally {\n        // pendingRouteOperations.delete(filepath);\n      }\n    };\n    const route = bundleAsync();\n\n    this.pendingRouteOperations.set(filePath, route);\n    return route;\n  }\n\n  private async ssrImportApiRoute(\n    filePath: string,\n    { platform }: { platform: string }\n  ): Promise<null | Record<string, Function> | Response> {\n    // TODO: Cache the evaluated function.\n    try {\n      const apiRoute = await this.bundleApiRoute(filePath, { platform });\n\n      if (!apiRoute?.src) {\n        return null;\n      }\n      return evalMetroNoHandling(this.projectRoot, apiRoute.src, apiRoute.filename);\n    } catch (error) {\n      // Format any errors that were thrown in the global scope of the evaluation.\n      if (error instanceof Error) {\n        try {\n          const htmlServerError = await getErrorOverlayHtmlAsync({\n            error,\n            projectRoot: this.projectRoot,\n            routerRoot: this.instanceMetroOptions.routerRoot!,\n          });\n\n          return new Response(htmlServerError, {\n            status: 500,\n            headers: {\n              'Content-Type': 'text/html',\n            },\n          });\n        } catch (internalError) {\n          debug('Failed to generate Metro server error UI for API Route error:', internalError);\n          throw error;\n        }\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private invalidateApiRouteCache() {\n    this.pendingRouteOperations.clear();\n  }\n\n  // Ensure the global is available for SSR CSS modules to inject client updates.\n  private bindRSCDevModuleInjectionHandler() {\n    // Used by SSR CSS modules to broadcast client updates.\n    // @ts-expect-error\n    globalThis.__expo_rsc_inject_module = this.sendClientModule.bind(this);\n  }\n\n  // NOTE: This can only target a single platform at a time (web).\n  // used for sending RSC CSS to the root client in development.\n  private sendClientModule({ code, id }: { code: string; id: string }) {\n    this.broadcastMessage('sendDevCommand', {\n      name: 'module-import',\n      data: {\n        code,\n        id,\n      },\n    });\n  }\n\n  // Metro HMR\n\n  private setupHmr(url: URL) {\n    const onReload = () => {\n      // Send reload command to client from Fast Refresh code.\n      debug('[SSR]: Reload requested.');\n\n      this.onReloadRscEvent?.();\n\n      this.broadcastMessage('sendDevCommand', {\n        name: 'rsc-reload',\n        // TODO: Target only certain platforms\n        // platform,\n      });\n    };\n\n    this.registerSsrHmrAsync(url.toString(), onReload);\n  }\n\n  // Direct Metro access\n\n  // Emulates the Metro dev server .bundle endpoint without having to go through a server.\n  private async _bundleDirectAsync(\n    resolvedEntryFilePath: string,\n    {\n      transformOptions,\n      resolverOptions,\n      graphOptions,\n      serializerOptions,\n    }: {\n      transformOptions: TransformInputOptions;\n      resolverOptions: {\n        customResolverOptions: CustomResolverOptions;\n        dev: boolean;\n      };\n      serializerOptions: {\n        modulesOnly: boolean;\n        runModule: boolean;\n        sourceMapUrl: string;\n        sourceUrl: string;\n        inlineSourceMap: boolean;\n        excludeSource: boolean;\n      };\n      graphOptions: {\n        shallow: boolean;\n        lazy: boolean;\n      };\n    }\n  ): Promise<{\n    numModifiedFiles: number;\n    lastModifiedDate: Date;\n    nextRevId: string;\n    bundle: string;\n    map: string;\n\n    // Defined if the output is multi-bundle.\n    artifacts?: SerialAsset[];\n    assets?: readonly BundleAssetWithFileHashes[];\n  }> {\n    assert(this.metro, 'Metro server must be running to bundle directly.');\n    const config = this.metro._config;\n    const buildNumber = this.metro.getNewBuildNumber();\n    const bundlePerfLogger = config.unstable_perfLoggerFactory?.('BUNDLING_REQUEST', {\n      key: buildNumber,\n    });\n\n    const onProgress: MetroOnProgress = (transformedFileCount: number, totalFileCount: number) => {\n      this.metro?._reporter?.update?.({\n        buildID: getBuildID(buildNumber),\n        type: 'bundle_transform_progressed',\n        transformedFileCount,\n        totalFileCount,\n      });\n    };\n\n    const revPromise = this.getMetroRevision(resolvedEntryFilePath, {\n      graphOptions,\n      transformOptions,\n      resolverOptions,\n    });\n\n    bundlePerfLogger?.point('resolvingAndTransformingDependencies_start');\n    bundlePerfLogger?.annotate({\n      bool: {\n        initial_build: revPromise == null,\n      },\n    });\n    this.metro?._reporter.update({\n      buildID: getBuildID(buildNumber),\n      bundleDetails: {\n        bundleType: transformOptions.type,\n        dev: transformOptions.dev,\n        entryFile: resolvedEntryFilePath,\n        minify: transformOptions.minify,\n        platform: transformOptions.platform,\n        customResolverOptions: resolverOptions.customResolverOptions,\n        customTransformOptions: transformOptions.customTransformOptions ?? {},\n      },\n      isPrefetch: false,\n      type: 'bundle_build_started',\n    });\n\n    try {\n      let delta: DeltaResult;\n      let revision: GraphRevision;\n\n      // TODO: Some bug in Metro/RSC causes this to break when changing imports in server components.\n      // We should resolve the bug because it results in ~6x faster bundling to reuse the graph revision.\n      if (transformOptions.customTransformOptions?.environment === 'react-server') {\n        const props = await this.metro.getBundler().initializeGraph(\n          // NOTE: Using absolute path instead of relative input path is a breaking change.\n          // entryFile,\n          resolvedEntryFilePath,\n\n          transformOptions,\n          resolverOptions,\n          {\n            onProgress,\n            shallow: graphOptions.shallow,\n            lazy: graphOptions.lazy,\n          }\n        );\n        delta = props.delta;\n        revision = props.revision;\n      } else {\n        const props = await (revPromise != null\n          ? this.metro.getBundler().updateGraph(await revPromise, false)\n          : this.metro.getBundler().initializeGraph(\n              // NOTE: Using absolute path instead of relative input path is a breaking change.\n              // entryFile,\n              resolvedEntryFilePath,\n\n              transformOptions,\n              resolverOptions,\n              {\n                onProgress,\n                shallow: graphOptions.shallow,\n                lazy: graphOptions.lazy,\n              }\n            ));\n        delta = props.delta;\n        revision = props.revision;\n      }\n\n      bundlePerfLogger?.annotate({\n        int: {\n          graph_node_count: revision.graph.dependencies.size,\n        },\n      });\n      bundlePerfLogger?.point('resolvingAndTransformingDependencies_end');\n      bundlePerfLogger?.point('serializingBundle_start');\n\n      const shouldAddToIgnoreList = this.metro._shouldAddModuleToIgnoreList.bind(this.metro);\n\n      const serializer = this.getMetroSerializer();\n\n      const bundle = await serializer(\n        // NOTE: Using absolute path instead of relative input path is a breaking change.\n        // entryFile,\n        resolvedEntryFilePath,\n\n        revision.prepend as any,\n        revision.graph as any,\n        {\n          asyncRequireModulePath: await this.metro._resolveRelativePath(\n            config.transformer.asyncRequireModulePath,\n            {\n              relativeTo: 'project',\n              resolverOptions,\n              transformOptions,\n            }\n          ),\n          // ...serializerOptions,\n          processModuleFilter: config.serializer.processModuleFilter,\n          createModuleId: this.metro._createModuleId,\n          getRunModuleStatement: config.serializer.getRunModuleStatement,\n          includeAsyncPaths: graphOptions.lazy,\n          dev: transformOptions.dev,\n          projectRoot: config.projectRoot,\n          modulesOnly: serializerOptions.modulesOnly,\n          runBeforeMainModule: config.serializer.getModulesRunBeforeMainModule(\n            resolvedEntryFilePath\n            // path.relative(config.projectRoot, entryFile)\n          ),\n          runModule: serializerOptions.runModule,\n          sourceMapUrl: serializerOptions.sourceMapUrl,\n          sourceUrl: serializerOptions.sourceUrl,\n          inlineSourceMap: serializerOptions.inlineSourceMap,\n          serverRoot: config.server.unstable_serverRoot ?? config.projectRoot,\n          shouldAddToIgnoreList,\n\n          // @ts-expect-error: passed to our serializer to enable non-serial return values.\n          serializerOptions,\n        }\n      );\n\n      this.metro._reporter.update({\n        buildID: getBuildID(buildNumber),\n        type: 'bundle_build_done',\n      });\n\n      bundlePerfLogger?.point('serializingBundle_end');\n\n      let bundleCode: string | null = null;\n      let bundleMap: string | null = null;\n\n      // @ts-expect-error: If the output is multi-bundle...\n      if (serializerOptions.output === 'static') {\n        try {\n          const parsed = typeof bundle === 'string' ? JSON.parse(bundle) : bundle;\n\n          assert(\n            'artifacts' in parsed && Array.isArray(parsed.artifacts),\n            'Expected serializer to return an object with key artifacts to contain an array of serial assets.'\n          );\n\n          const artifacts = parsed.artifacts as SerialAsset[];\n          const assets = parsed.assets;\n\n          const bundleCode = artifacts.filter((asset) => asset.type === 'js')[0];\n          const bundleMap = artifacts.filter((asset) => asset.type === 'map')?.[0]?.source ?? '';\n\n          return {\n            numModifiedFiles: delta.reset\n              ? delta.added.size + revision.prepend.length\n              : delta.added.size + delta.modified.size + delta.deleted.size,\n            lastModifiedDate: revision.date,\n            nextRevId: revision.id,\n            bundle: bundleCode.source,\n            map: bundleMap,\n            artifacts,\n            assets,\n          };\n        } catch (error: any) {\n          throw new Error(\n            'Serializer did not return expected format. The project copy of `expo/metro-config` may be out of date. Error: ' +\n              error.message\n          );\n        }\n      }\n\n      if (typeof bundle === 'string') {\n        bundleCode = bundle;\n\n        // Create the source map in a second pass...\n        let { prepend, graph } = revision;\n        if (serializerOptions.modulesOnly) {\n          prepend = [];\n        }\n\n        bundleMap = await sourceMapStringAsync(\n          [\n            //\n            ...prepend,\n            ...this.metro._getSortedModules(graph),\n          ],\n          {\n            excludeSource: serializerOptions.excludeSource,\n            processModuleFilter: config.serializer.processModuleFilter,\n            shouldAddToIgnoreList,\n          }\n        );\n      } else {\n        bundleCode = bundle.code;\n        bundleMap = bundle.map;\n      }\n\n      return {\n        numModifiedFiles: delta.reset\n          ? delta.added.size + revision.prepend.length\n          : delta.added.size + delta.modified.size + delta.deleted.size,\n        lastModifiedDate: revision.date,\n        nextRevId: revision.id,\n        bundle: bundleCode,\n        map: bundleMap,\n      };\n    } catch (error) {\n      this.metro._reporter.update({\n        buildID: getBuildID(buildNumber),\n        type: 'bundle_build_failed',\n      });\n\n      throw error;\n    }\n  }\n\n  private getMetroSerializer() {\n    return (\n      this.metro?._config?.serializer.customSerializer ||\n      ((entryPoint, preModules, graph, options) =>\n        bundleToString(baseJSBundle(entryPoint, preModules, graph, options)).code)\n    );\n  }\n\n  private getMetroRevision(\n    resolvedEntryFilePath: string,\n    {\n      graphOptions,\n      transformOptions,\n      resolverOptions,\n    }: {\n      transformOptions: TransformInputOptions;\n      resolverOptions: {\n        customResolverOptions: CustomResolverOptions;\n        dev: boolean;\n      };\n      graphOptions: {\n        shallow: boolean;\n        lazy: boolean;\n      };\n    }\n  ) {\n    assert(this.metro, 'Metro server must be running to bundle directly.');\n    const config = this.metro._config;\n\n    const graphId = getGraphId(resolvedEntryFilePath, transformOptions, {\n      unstable_allowRequireContext: config.transformer.unstable_allowRequireContext,\n      resolverOptions,\n      shallow: graphOptions.shallow,\n      lazy: graphOptions.lazy,\n    });\n    return this.metro.getBundler().getRevisionByGraphId(graphId);\n  }\n\n  private async resolveRelativePathAsync(\n    moduleId: string,\n    {\n      resolverOptions,\n      transformOptions,\n    }: {\n      transformOptions: TransformInputOptions;\n      resolverOptions: {\n        customResolverOptions: CustomResolverOptions;\n        dev: boolean;\n      };\n    }\n  ) {\n    assert(this.metro, 'cannot invoke resolveRelativePathAsync without metro instance');\n    return await this.metro._resolveRelativePath(convertPathToModuleSpecifier(moduleId), {\n      relativeTo: 'server',\n      resolverOptions,\n      transformOptions,\n    });\n  }\n}\n\nfunction getBuildID(buildNumber: number): string {\n  return buildNumber.toString(36);\n}\n\nfunction wrapBundle(str: string) {\n  // Skip the metro runtime so debugging is a bit easier.\n  // Replace the __r() call with an export statement.\n  // Use gm to apply to the last require line. This is needed when the bundle has side-effects.\n  return str.replace(/^(__r\\(.*\\);)$/gm, 'module.exports = $1');\n}\n\nasync function sourceMapStringAsync(\n  modules: readonly import('metro/src/DeltaBundler/types').Module<any>[],\n  options: SourceMapGeneratorOptions\n): Promise<string> {\n  return (await sourceMapGeneratorNonBlocking(modules, options)).toString(undefined, {\n    excludeSource: options.excludeSource,\n  });\n}\n"],"names":["MetroBundlerDevServer","debug","require","EXPO_GO_METRO_PORT","DEV_CLIENT_METRO_PORT","BundlerDevServer","metro","hmrServer","ssrHmrClients","Map","name","resolvePortAsync","options","port","devClient","Number","process","env","RCT_METRO_PORT","getFreePortAsync","exportExpoRouterApiRoutesAsync","includeSourceMaps","outputDir","prerenderManifest","platform","routerRoot","instanceMetroOptions","assert","appDir","path","join","projectRoot","manifest","getExpoRouterRoutesManifestAsync","files","rscPath","isReactServerComponentsEnabled","apiRoutes","find","route","page","startsWith","push","file","resolveFrom","namedRegex","routeKeys","rsc","filepath","isAbsolute","contents","bundleApiRoute","artifactFilename","relative","replace","src","map","artifactBasename","encodeURIComponent","basename","parsedMap","JSON","parse","set","stringify","version","sources","source","convertPathToModuleSpecifier","sourcesContent","Array","length","fill","names","mappings","apiRouteId","targetDomain","htmlRoutes","exp","getConfig","fetchManifest","extra","router","platformRoutes","asJson","CommandError","getServerManifestAsync","getBuildTimeServerManifestAsync","ssrLoadModule","environment","isReactServerRoutesEnabled","serverManifest","getStaticRenderFunctionAsync","url","getDevServerUrlOrAssert","getStaticContent","getManifest","preserveApiRoutes","renderAsync","URL","getStaticResourcesAsync","mainModuleName","clientBoundaries","mode","minify","isExporting","baseUrl","reactCompiler","asyncRoutes","resolvedMainModuleName","resolveMainModuleName","metroImportAsArtifactsAsync","splitChunks","EXPO_NO_BUNDLE_SPLITTING","serializerIncludeMaps","lazy","shouldEnableAsyncImports","bytecode","getStaticPageAsync","pathname","devBundleUrlPathname","createBundleUrlPath","bundleStaticHtml","location","artifacts","resources","staticHtml","Promise","all","content","serializeHtmlWithAssets","template","devBundleUrl","hydrate","EXPO_WEB_DEV_HYDRATE","filePath","specificOptions","extras","res","ssrLoadModuleContents","hot","serverRoot","getMetroServerRoot","relativePath","filename","setupHmr","evalMetroAndWrapFunctions","results","serializerOutput","assets","metroLoadModuleContents","extraOptions","opts","inlineSourceMap","engine","expoBundleOptions","getMetroDirectBundleOptions","resolverOptions","customResolverOptions","dev","transformOptions","type","unstable_transformProfile","customTransformOptions","Object","create","runtimeBytecodeVersion","resolvedEntryFilePath","resolveRelativePathAsync","createBundleUrlOsPath","_bundleDirectAsync","graphOptions","shallow","serializerOptions","modulesOnly","runModule","sourceUrl","sourceMapUrl","bundle","rest","scriptContents","wrapBundle","cachedSourceMaps","nativeExportBundleAsync","singlePageReactServerComponentExportAsync","legacySinglePageExportBundleAsync","reactClientReferences","reactServerReferences","serverActionReferencesInServer","cssModules","rscRenderer","getExpoRouterClientReferencesAsync","domRoot","filter","a","artifact","metadata","ref","fileURLToFilePath","flat","Boolean","Error","nestedClientBoundaries","exportServerActionsAsync","entryPoints","hasUniqueClientBoundaries","some","boundary","includes","Set","concat","clientBoundariesAsOpaqueIds","toPosixPath","moduleIdToSplitBundle","paths","values","reduce","acc","ssrManifest","keys","forEach","exportRoutesAsync","fromEntries","from","entries","key","value","output","watchEnvironmentVariables","instance","envFiles","runtimeEnv","getFiles","NODE_ENV","fileName","observeFileChanges","server","load","force","startImplementationAsync","urlCreator","getUrlCreator","config","skipSDKVersionRequirement","experiments","reactServerComponentRoutes","reactServerFunctions","isReactServerActionsOnlyEnabled","useServerRendering","web","hasApiRoutes","getBaseUrlFromExpoConfig","getAsyncRoutesFromExpoConfig","getRouterDirectoryModuleIdWithManifest","parsedOptions","maxWorkers","resetCache","resetDevServer","EXPO_DEV_SERVER_ORIGIN","middleware","messageSocket","instantiateMetroAsync","manifestMiddleware","getManifestMiddlewareAsync","prependMiddleware","ContextModuleSourceMapsMiddleware","getHandler","use","InterstitialPageMiddleware","scheme","ReactDevToolsPageMiddleware","DevToolsPluginMiddleware","devToolsPluginManager","deepLinkMiddleware","RuntimeRedirectMiddleware","getLocation","runtime","constructDevClientUrl","constructUrl","domComponentRenderer","createDomComponentsMiddleware","metroRoot","CreateFileMiddleware","isTargetingWeb","ServeStaticMiddleware","FaviconMiddleware","observeAnyFileChanges","events","invalidateApiRouteCache","hasWarnedAboutApiRoutes","event","isApiRouteConvention","warnInvalidWebOutput","bindRSCDevModuleInjectionHandler","rscMiddleware","createServerComponentsMiddleware","bind","ssrLoadModuleArtifacts","useClientRouter","createModuleId","_createModuleId","onReloadRscEvent","HistoryFallbackMiddleware","internal","createRouteHandlerMiddleware","functionFilePath","ssrImportApiRoute","originalClose","close","callback","err","assertMetroPrivateServer","host","protocol","registerSsrHmrAsync","onReload","has","sendFn","message","data","String","update","body","isInitialUpdate","added","modified","deleted","hasUpdate","globalThis","__c","Log","error","_bundler","_revisionsByGraphId","client","onClientConnect","optedIntoHMR","_registerEntryPoint","waitForTypeScriptAsync","resolve","off","metroWatchTypeScriptFiles","tsconfig","throttle","eventTypes","TypeScriptProjectPrerequisite","req","bootstrapAsync","log","chalk","red","exception","startTypeScriptServices","startTypescriptTypeGenerationAsync","getConfigModuleIds","pendingRouteOperations","get","bundleAsync","undefined","apiRoute","evalMetroNoHandling","htmlServerError","getErrorOverlayHtmlAsync","Response","status","headers","internalError","clear","__expo_rsc_inject_module","sendClientModule","code","id","broadcastMessage","toString","_config","buildNumber","getNewBuildNumber","bundlePerfLogger","unstable_perfLoggerFactory","onProgress","transformedFileCount","totalFileCount","_reporter","buildID","getBuildID","revPromise","getMetroRevision","point","annotate","bool","initial_build","bundleDetails","bundleType","entryFile","isPrefetch","delta","revision","props","getBundler","initializeGraph","updateGraph","int","graph_node_count","graph","dependencies","size","shouldAddToIgnoreList","_shouldAddModuleToIgnoreList","serializer","getMetroSerializer","prepend","asyncRequireModulePath","_resolveRelativePath","transformer","relativeTo","processModuleFilter","getRunModuleStatement","includeAsyncPaths","runBeforeMainModule","getModulesRunBeforeMainModule","unstable_serverRoot","bundleCode","bundleMap","parsed","isArray","asset","numModifiedFiles","reset","lastModifiedDate","date","nextRevId","sourceMapStringAsync","_getSortedModules","excludeSource","customSerializer","entryPoint","preModules","bundleToString","baseJSBundle","graphId","getGraphId","unstable_allowRequireContext","getRevisionByGraphId","moduleId","str","modules","sourceMapGeneratorNonBlocking"],"mappings":"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"}