{"version":3,"file":"adapter.js","sourceRoot":"","sources":["../../../src/runtime/parallel/adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess, fork } from 'node:child_process'\nimport path from 'node:path'\nimport { EventEmitter } from 'node:events'\nimport { SupportCodeLibrary } from '../../support_code_library_builder/types'\nimport { AssembledTestCase } from '../../assemble'\nimport { ILogger } from '../../logger'\nimport { RuntimeAdapter } from '../types'\nimport { IRunEnvironment, IRunOptionsRuntime } from '../../api'\nimport {\n  FinalizeCommand,\n  InitializeCommand,\n  RunCommand,\n  WorkerToCoordinatorEvent,\n} from './types'\n\nconst runWorkerPath = path.resolve(__dirname, 'run_worker.js')\n\nconst enum WorkerState {\n  'idle',\n  'closed',\n  'running',\n  'new',\n}\n\ninterface ManagedWorker {\n  state: WorkerState\n  process: ChildProcess\n  id: string\n}\n\ninterface WorkPlacement {\n  index: number\n  item: AssembledTestCase\n}\n\nexport class ChildProcessAdapter implements RuntimeAdapter {\n  private idleInterventions: number = 0\n  private failing: boolean = false\n  private onFinish: (success: boolean) => void\n  private todo: Array<AssembledTestCase> = []\n  private readonly inProgress: Record<string, AssembledTestCase> = {}\n  private readonly workers: Record<string, ManagedWorker> = {}\n\n  constructor(\n    private readonly environment: IRunEnvironment,\n    private readonly logger: ILogger,\n    private readonly eventBroadcaster: EventEmitter,\n    private readonly options: IRunOptionsRuntime,\n    private readonly supportCodeLibrary: SupportCodeLibrary\n  ) {}\n\n  parseWorkerMessage(\n    worker: ManagedWorker,\n    message: WorkerToCoordinatorEvent\n  ): void {\n    switch (message.type) {\n      case 'READY':\n        worker.state = WorkerState.idle\n        this.awakenWorkers(worker)\n        break\n      case 'ENVELOPE':\n        this.eventBroadcaster.emit('envelope', message.envelope)\n        break\n      case 'FINISHED':\n        if (!message.success) {\n          this.failing = true\n        }\n        delete this.inProgress[worker.id]\n        worker.state = WorkerState.idle\n        this.awakenWorkers(worker)\n        break\n      default:\n        throw new Error(\n          `Unexpected message from worker: ${JSON.stringify(message)}`\n        )\n    }\n  }\n\n  awakenWorkers(triggeringWorker: ManagedWorker): void {\n    Object.values(this.workers).forEach((worker) => {\n      if (worker.state === WorkerState.idle) {\n        this.giveWork(worker)\n      }\n      return worker.state !== WorkerState.idle\n    })\n\n    if (Object.keys(this.inProgress).length == 0 && this.todo.length > 0) {\n      this.giveWork(triggeringWorker, true)\n      this.idleInterventions++\n    }\n  }\n\n  startWorker(id: string, total: number): void {\n    const workerProcess = fork(runWorkerPath, [], {\n      cwd: this.environment.cwd,\n      env: {\n        ...this.environment.env,\n        CUCUMBER_PARALLEL: 'true',\n        CUCUMBER_TOTAL_WORKERS: total.toString(),\n        CUCUMBER_WORKER_ID: id,\n      },\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n    })\n    const worker = { state: WorkerState.new, process: workerProcess, id }\n    this.workers[id] = worker\n    worker.process.on('message', (message: WorkerToCoordinatorEvent) => {\n      this.parseWorkerMessage(worker, message)\n    })\n    worker.process.on('close', (exitCode) => {\n      worker.state = WorkerState.closed\n      this.onWorkerProcessClose(exitCode)\n    })\n    worker.process.send({\n      type: 'INITIALIZE',\n      supportCodeCoordinates: this.supportCodeLibrary.originalCoordinates,\n      supportCodeIds: {\n        stepDefinitionIds: this.supportCodeLibrary.stepDefinitions.map(\n          (s) => s.id\n        ),\n        beforeTestCaseHookDefinitionIds:\n          this.supportCodeLibrary.beforeTestCaseHookDefinitions.map(\n            (h) => h.id\n          ),\n        afterTestCaseHookDefinitionIds:\n          this.supportCodeLibrary.afterTestCaseHookDefinitions.map((h) => h.id),\n      },\n      options: this.options,\n    } satisfies InitializeCommand)\n  }\n\n  onWorkerProcessClose(exitCode: number): void {\n    if (exitCode !== 0) {\n      this.failing = true\n    }\n\n    if (\n      Object.values(this.workers).every((x) => x.state === WorkerState.closed)\n    ) {\n      this.onFinish(!this.failing)\n    }\n  }\n\n  async run(\n    assembledTestCases: ReadonlyArray<AssembledTestCase>\n  ): Promise<boolean> {\n    this.todo = Array.from(assembledTestCases)\n    return await new Promise<boolean>((resolve) => {\n      for (let i = 0; i < this.options.parallel; i++) {\n        this.startWorker(i.toString(), this.options.parallel)\n      }\n      this.onFinish = (status) => {\n        if (this.idleInterventions > 0) {\n          this.logger.warn(\n            `WARNING: All workers went idle ${this.idleInterventions} time(s). Consider revising handler passed to setParallelCanAssign.`\n          )\n        }\n\n        resolve(status)\n      }\n    })\n  }\n\n  nextWorkPlacement(): WorkPlacement {\n    for (let index = 0; index < this.todo.length; index++) {\n      const placement = this.placementAt(index)\n      if (\n        this.supportCodeLibrary.parallelCanAssign(\n          placement.item.pickle,\n          Object.values(this.inProgress).map(({ pickle }) => pickle)\n        )\n      ) {\n        return placement\n      }\n    }\n\n    return null\n  }\n\n  placementAt(index: number): WorkPlacement {\n    return {\n      index,\n      item: this.todo[index],\n    }\n  }\n\n  giveWork(worker: ManagedWorker, force: boolean = false): void {\n    if (this.todo.length < 1) {\n      worker.state = WorkerState.running\n      worker.process.send({ type: 'FINALIZE' } satisfies FinalizeCommand)\n      return\n    }\n\n    const workPlacement = force ? this.placementAt(0) : this.nextWorkPlacement()\n\n    if (workPlacement === null) {\n      return\n    }\n\n    const { index: nextIndex, item } = workPlacement\n\n    this.todo.splice(nextIndex, 1)\n    this.inProgress[worker.id] = item\n    worker.state = WorkerState.running\n    worker.process.send({\n      type: 'RUN',\n      assembledTestCase: item,\n      failing: this.failing,\n    } satisfies RunCommand)\n  }\n}\n"]}