{"version":3,"file":"plugin_manager.js","sourceRoot":"","sources":["../../src/plugin/plugin_manager.ts"],"names":[],"mappings":";;;AAgBA,MAAa,aAAa;IASK;IARrB,QAAQ,GAAoB;QAClC,OAAO,EAAE,EAAE;QACX,eAAe,EAAE,EAAE;QACnB,gBAAgB,EAAE,EAAE;QACpB,eAAe,EAAE,EAAE;KACpB,CAAA;IACO,UAAU,GAAoB,EAAE,CAAA;IAExC,YAA6B,WAA8B;QAA9B,gBAAW,GAAX,WAAW,CAAmB;IAAG,CAAC;IAEvD,KAAK,CAAC,QAAQ,CACpB,KAAQ,EACR,OAAyC;QAEzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;IACrC,CAAC;IAED,KAAK,CAAC,aAAa,CACjB,MAAoC,EACpC,OAAoB,EACpB,KAA4C,EAC5C,SAAkB;QAElB,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC;YACvC,EAAE,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC;YACjD,OAAO,EAAE,MAAM,CAAC,UAAU;gBACxB,CAAC,CAAE,OAAe,CAAC,MAAM,CAAC,UAAU,CAAC,IAAK,EAAkB;gBAC5D,CAAC,CAAC,OAAO;YACX,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;YAC/B,KAAK;YACL,SAAS;SACV,CAAC,CAAA;QACF,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SAChC;IACH,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,SAAoB,EACpB,MAAmC,EACnC,OAAoB;QAEpB,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC;YACzC,SAAS;YACT,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5B,OAAO;YACP,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;YAC/B,WAAW,EAAE;gBACX,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG;gBACzB,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;gBAC/B,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;aACjC;SACF,CAAC,CAAA;QACF,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SAChC;IACH,CAAC;IAED,IAAI,CACF,KAAQ,EACR,KAAsC;QAEtC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,SAAS,CACb,KAAQ,EACR,KAAsC;QAEtC,IAAI,WAAW,GAAG,KAAK,CAAA;QACvB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC1C,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,CAAA;YAC3C,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;gBACnC,WAAW,GAAG,QAAQ,CAAA;aACvB;SACF;QACD,OAAO,WAAW,CAAA;IACpB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACvC,MAAM,SAAS,EAAE,CAAA;SAClB;IACH,CAAC;CACF;AArFD,sCAqFC","sourcesContent":["import { UsableEnvironment } from '../environment'\nimport {\n  CoordinatorPluginEventHandler,\n  InternalPlugin,\n  PluginCleanup,\n  CoordinatorPluginEventValues,\n  CoordinatorPluginEventKey,\n  CoordinatorPluginTransformEventKey,\n  Operation,\n  FormatterPlugin,\n} from './types'\n\ntype HandlerRegistry = {\n  [K in CoordinatorPluginEventKey]: Array<CoordinatorPluginEventHandler<K>>\n}\n\nexport class PluginManager {\n  private handlers: HandlerRegistry = {\n    message: [],\n    'paths:resolve': [],\n    'pickles:filter': [],\n    'pickles:order': [],\n  }\n  private cleanupFns: PluginCleanup[] = []\n\n  constructor(private readonly environment: UsableEnvironment) {}\n\n  private async register<K extends CoordinatorPluginEventKey>(\n    event: K,\n    handler: CoordinatorPluginEventHandler<K>\n  ) {\n    this.handlers[event]?.push(handler)\n  }\n\n  async initFormatter<OptionsType>(\n    plugin: FormatterPlugin<OptionsType>,\n    options: OptionsType,\n    write: (buffer: string | Uint8Array) => void,\n    directory?: string\n  ) {\n    const cleanupFn = await plugin.formatter({\n      on: (key, handler) => this.register(key, handler),\n      options: plugin.optionsKey\n        ? (options as any)[plugin.optionsKey] ?? ({} as OptionsType)\n        : options,\n      logger: this.environment.logger,\n      write,\n      directory,\n    })\n    if (typeof cleanupFn === 'function') {\n      this.cleanupFns.push(cleanupFn)\n    }\n  }\n\n  async initCoordinator<OptionsType>(\n    operation: Operation,\n    plugin: InternalPlugin<OptionsType>,\n    options: OptionsType\n  ) {\n    const cleanupFn = await plugin.coordinator({\n      operation,\n      on: this.register.bind(this),\n      options,\n      logger: this.environment.logger,\n      environment: {\n        cwd: this.environment.cwd,\n        stderr: this.environment.stderr,\n        env: { ...this.environment.env },\n      },\n    })\n    if (typeof cleanupFn === 'function') {\n      this.cleanupFns.push(cleanupFn)\n    }\n  }\n\n  emit<K extends CoordinatorPluginEventKey>(\n    event: K,\n    value: CoordinatorPluginEventValues[K]\n  ): void {\n    this.handlers[event].forEach((handler) => handler(value))\n  }\n\n  async transform<K extends CoordinatorPluginTransformEventKey>(\n    event: K,\n    value: CoordinatorPluginEventValues[K]\n  ): Promise<CoordinatorPluginEventValues[K]> {\n    let transformed = value\n    for (const handler of this.handlers[event]) {\n      const returned = await handler(transformed)\n      if (typeof returned !== 'undefined') {\n        transformed = returned\n      }\n    }\n    return transformed\n  }\n\n  async cleanup(): Promise<void> {\n    for (const cleanupFn of this.cleanupFns) {\n      await cleanupFn()\n    }\n  }\n}\n"]}