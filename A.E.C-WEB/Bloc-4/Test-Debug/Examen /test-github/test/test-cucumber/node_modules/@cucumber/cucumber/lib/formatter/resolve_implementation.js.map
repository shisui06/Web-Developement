{"version":3,"file":"resolve_implementation.js","sourceRoot":"","sources":["../../src/formatter/resolve_implementation.ts"],"names":[],"mappings":";;;;;;AAAA,wDAA+B;AAC/B,+CAA0C;AAC1C,iEAA0D;AAGnD,KAAK,UAAU,qBAAqB,CACzC,SAAiB,EACjB,GAAW;IAEX,MAAM,WAAW,GAAG,iBAAO,CAAC,SAAS,CAAC,CAAA;IACtC,IAAI,WAAW,EAAE;QACf,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;YACnC,OAAO,WAAW,CAAA;SACnB;aAAM;YACL,SAAS,GAAG,WAAW,CAAA;SACxB;KACF;IACD,MAAM,QAAQ,GAAG,MAAM,IAAA,wBAAU,EAAC,SAAS,EAAE,GAAG,CAAC,CAAA;IACjD,MAAM,KAAK,GAAG,IAAA,wCAAiB,EAAC,QAAQ,CAAC,CAAA;IACzC,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,GAAG,SAAS,mCAAmC,CAAC,CAAA;KACjE;IACD,OAAO,KAAK,CAAA;AACd,CAAC;AAlBD,sDAkBC","sourcesContent":["import builtin from './builtin'\nimport { importCode } from './import_code'\nimport { findClassOrPlugin } from './find_class_or_plugin'\nimport { FormatterImplementation } from './index'\n\nexport async function resolveImplementation(\n  specifier: string,\n  cwd: string\n): Promise<FormatterImplementation> {\n  const fromBuiltin = builtin[specifier]\n  if (fromBuiltin) {\n    if (typeof fromBuiltin !== 'string') {\n      return fromBuiltin\n    } else {\n      specifier = fromBuiltin\n    }\n  }\n  const imported = await importCode(specifier, cwd)\n  const found = findClassOrPlugin(imported)\n  if (!found) {\n    throw new Error(`${specifier} does not export a function/class`)\n  }\n  return found\n}\n"]}