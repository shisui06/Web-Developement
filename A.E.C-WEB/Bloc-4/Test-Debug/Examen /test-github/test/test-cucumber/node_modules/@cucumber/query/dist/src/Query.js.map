{"version":3,"file":"Query.js","sourceRoot":"","sources":["../../src/Query.ts"],"names":[],"mappings":"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","sourcesContent":["import * as messages from '@cucumber/messages'\nimport {\n  Duration,\n  Feature,\n  getWorstTestStepResult,\n  GherkinDocument,\n  Pickle,\n  PickleStep,\n  Rule,\n  Scenario,\n  Step,\n  TestCase,\n  TestCaseFinished,\n  TestCaseStarted,\n  TestRunFinished,\n  TestRunStarted,\n  TestStep,\n  TestStepFinished,\n  TestStepResult,\n  TestStepResultStatus,\n  TimeConversion\n} from '@cucumber/messages'\nimport {ArrayMultimap} from '@teppeis/multimaps'\nimport {Lineage, NamingStrategy} from \"./Lineage\";\nimport { comparatorBy, comparatorById, comparatorByStatus, assert } from './helpers'\n\nexport default class Query {\n  private readonly testStepResultByPickleId = new ArrayMultimap<string, messages.TestStepResult>()\n  private readonly testStepResultsByPickleStepId = new ArrayMultimap<\n    string,\n    messages.TestStepResult\n  >()\n  private readonly testCaseByPickleId = new Map<string, messages.TestCase>()\n  private readonly pickleIdByTestStepId = new Map<string, string>()\n  private readonly pickleStepIdByTestStepId = new Map<string, string>()\n  private readonly testStepResultsbyTestStepId = new ArrayMultimap<\n    string,\n    messages.TestStepResult\n  >()\n  private readonly testStepIdsByPickleStepId = new ArrayMultimap<string, string>()\n  private readonly hooksById = new Map<string, messages.Hook>()\n  private readonly attachmentsByTestStepId = new ArrayMultimap<string, messages.Attachment>()\n  private readonly stepMatchArgumentsListsByPickleStepId = new Map<\n    string,\n    readonly messages.StepMatchArgumentsList[]\n  >()\n\n  private testRunStarted: TestRunStarted\n  private testRunFinished: TestRunFinished\n  private readonly testCaseStarted: Array<TestCaseStarted> = []\n  private readonly lineageById: Map<string, Lineage> = new Map()\n  private readonly stepById: Map<string, Step> = new Map()\n  private readonly pickleById: Map<string, Pickle> = new Map()\n  private readonly pickleStepById: Map<string, PickleStep> = new Map()\n  private readonly testCaseById: Map<string, TestCase> = new Map()\n  private readonly testStepById: Map<string, TestStep> = new Map()\n  private readonly testCaseFinishedByTestCaseStartedId: Map<string, TestCaseFinished> = new Map()\n  private readonly testStepFinishedByTestCaseStartedId: ArrayMultimap<string, TestStepFinished> =\n      new ArrayMultimap()\n\n  public update(envelope: messages.Envelope) {\n    if (envelope.gherkinDocument) {\n      this.updateGherkinDocument(envelope.gherkinDocument)\n    }\n    if (envelope.pickle) {\n      this.updatePickle(envelope.pickle)\n    }\n    if (envelope.hook) {\n      this.hooksById.set(envelope.hook.id, envelope.hook)\n    }\n    if (envelope.testRunStarted) {\n      this.testRunStarted = envelope.testRunStarted\n    }\n    if (envelope.testCase) {\n      this.updateTestCase(envelope.testCase)\n    }\n    if (envelope.testCaseStarted) {\n      this.updateTestCaseStarted(envelope.testCaseStarted)\n    }\n    if (envelope.attachment) {\n      this.attachmentsByTestStepId.put(envelope.attachment.testStepId, envelope.attachment)\n    }\n    if (envelope.testStepFinished) {\n      this.updateTestStepFinished(envelope.testStepFinished)\n    }\n    if (envelope.testCaseFinished) {\n      this.updateTestCaseFinished(envelope.testCaseFinished)\n    }\n    if (envelope.testRunFinished) {\n      this.testRunFinished = envelope.testRunFinished\n    }\n  }\n\n  private updateGherkinDocument(gherkinDocument: GherkinDocument) {\n    if (gherkinDocument.feature) {\n      this.updateFeature(gherkinDocument.feature, {\n        gherkinDocument,\n      })\n    }\n  }\n\n  private updateFeature(feature: Feature, lineage: Lineage) {\n    feature.children.forEach((featureChild) => {\n      if (featureChild.background) {\n        this.updateSteps(featureChild.background.steps)\n      }\n      if (featureChild.scenario) {\n        this.updateScenario(featureChild.scenario, {\n          ...lineage,\n          feature,\n        })\n      }\n      if (featureChild.rule) {\n        this.updateRule(featureChild.rule, {\n          ...lineage,\n          feature,\n        })\n      }\n    })\n  }\n\n  private updateRule(rule: Rule, lineage: Lineage) {\n    rule.children.forEach((ruleChild) => {\n      if (ruleChild.background) {\n        this.updateSteps(ruleChild.background.steps)\n      }\n      if (ruleChild.scenario) {\n        this.updateScenario(ruleChild.scenario, {\n          ...lineage,\n          rule,\n        })\n      }\n    })\n  }\n\n  private updateScenario(scenario: Scenario, lineage: Lineage) {\n    this.lineageById.set(scenario.id, {\n      ...lineage,\n      scenario,\n    })\n    scenario.examples.forEach((examples, examplesIndex) => {\n      this.lineageById.set(examples.id, {\n        ...lineage,\n        scenario,\n        examples,\n        examplesIndex,\n      })\n      examples.tableBody.forEach((example, exampleIndex) => {\n        this.lineageById.set(example.id, {\n          ...lineage,\n          scenario,\n          examples,\n          examplesIndex,\n          example,\n          exampleIndex,\n        })\n      })\n    })\n    this.updateSteps(scenario.steps)\n  }\n\n  private updateSteps(steps: ReadonlyArray<Step>) {\n    steps.forEach((step) => this.stepById.set(step.id, step))\n  }\n\n  private updatePickle(pickle: Pickle) {\n    this.pickleById.set(pickle.id, pickle)\n    pickle.steps.forEach((pickleStep) => this.pickleStepById.set(pickleStep.id, pickleStep))\n  }\n\n  private updateTestCase(testCase: TestCase) {\n    this.testCaseById.set(testCase.id, testCase)\n\n    this.testCaseByPickleId.set(testCase.pickleId, testCase)\n    testCase.testSteps.forEach((testStep) => {\n      this.testStepById.set(testStep.id, testStep)\n      this.pickleIdByTestStepId.set(testStep.id, testCase.pickleId)\n      this.pickleStepIdByTestStepId.set(testStep.id, testStep.pickleStepId)\n      this.testStepIdsByPickleStepId.put(testStep.pickleStepId, testStep.id)\n      this.stepMatchArgumentsListsByPickleStepId.set(\n          testStep.pickleStepId,\n          testStep.stepMatchArgumentsLists\n      )\n    })\n  }\n\n  private updateTestCaseStarted(testCaseStarted: TestCaseStarted) {\n    this.testCaseStarted.push(testCaseStarted)\n\n    /*\n    when a test case attempt starts besides the first one, clear all existing results\n    and attachments for that test case, so we always report on the latest attempt\n    (applies to legacy pickle-oriented query methods only)\n     */\n    const testCase = this.testCaseById.get(testCaseStarted.testCaseId)\n    this.testStepResultByPickleId.delete(testCase.pickleId)\n    for (const testStep of testCase.testSteps) {\n      this.testStepResultsByPickleStepId.delete(testStep.pickleStepId)\n      this.testStepResultsbyTestStepId.delete(testStep.id)\n      this.attachmentsByTestStepId.delete(testStep.id)\n    }\n  }\n\n  private updateTestStepFinished(testStepFinished: TestStepFinished) {\n    this.testStepFinishedByTestCaseStartedId.put(\n        testStepFinished.testCaseStartedId,\n        testStepFinished\n    )\n\n    const pickleId = this.pickleIdByTestStepId.get(testStepFinished.testStepId)\n    this.testStepResultByPickleId.put(pickleId, testStepFinished.testStepResult)\n    const testStep = this.testStepById.get(testStepFinished.testStepId)\n    this.testStepResultsByPickleStepId.put(\n        testStep.pickleStepId,\n        testStepFinished.testStepResult\n    )\n    this.testStepResultsbyTestStepId.put(testStep.id, testStepFinished.testStepResult)\n  }\n\n  private updateTestCaseFinished(testCaseFinished: TestCaseFinished) {\n    this.testCaseFinishedByTestCaseStartedId.set(\n        testCaseFinished.testCaseStartedId,\n        testCaseFinished\n    )\n  }\n\n  /**\n   * Gets all the results for multiple pickle steps\n   * @param pickleStepIds\n   */\n  public getPickleStepTestStepResults(\n    pickleStepIds: readonly string[]\n  ): readonly messages.TestStepResult[] {\n    if (pickleStepIds.length === 0) {\n      return [\n        {\n          status: messages.TestStepResultStatus.UNKNOWN,\n          duration: messages.TimeConversion.millisecondsToDuration(0),\n        },\n      ]\n    }\n    return pickleStepIds.reduce((testStepResults: messages.TestStepResult[], pickleId) => {\n      return testStepResults.concat(this.testStepResultsByPickleStepId.get(pickleId))\n    }, [])\n  }\n\n  /**\n   * Gets all the results for multiple pickles\n   * @param pickleIds\n   */\n  public getPickleTestStepResults(\n    pickleIds: readonly string[]\n  ): readonly messages.TestStepResult[] {\n    if (pickleIds.length === 0) {\n      return [\n        {\n          status: messages.TestStepResultStatus.UNKNOWN,\n          duration: messages.TimeConversion.millisecondsToDuration(0),\n        },\n      ]\n    }\n    return pickleIds.reduce((testStepResults: messages.TestStepResult[], pickleId) => {\n      return testStepResults.concat(this.testStepResultByPickleId.get(pickleId))\n    }, [])\n  }\n\n  /**\n   * Gets all the attachments for multiple pickle steps\n   * @param pickleStepIds\n   */\n  public getPickleStepAttachments(\n    pickleStepIds: readonly string[]\n  ): readonly messages.Attachment[] {\n    return this.getTestStepsAttachments(\n      pickleStepIds.reduce((testStepIds: string[], pickleStepId: string) => {\n        return testStepIds.concat(this.testStepIdsByPickleStepId.get(pickleStepId))\n      }, [])\n    )\n  }\n\n  public getTestStepsAttachments(testStepIds: readonly string[]): readonly messages.Attachment[] {\n    return testStepIds.reduce((attachments: messages.Attachment[], testStepId) => {\n      return attachments.concat(this.attachmentsByTestStepId.get(testStepId))\n    }, [])\n  }\n\n  /**\n   * Get StepMatchArguments for a pickle step\n   * @param pickleStepId\n   */\n  public getStepMatchArgumentsLists(\n    pickleStepId: string\n  ): readonly messages.StepMatchArgumentsList[] | undefined {\n    return this.stepMatchArgumentsListsByPickleStepId.get(pickleStepId)\n  }\n\n  public getHook(hookId: string): messages.Hook {\n    return this.hooksById.get(hookId)\n  }\n\n  public getBeforeHookSteps(pickleId: string): readonly messages.TestStep[] {\n    const hookSteps: messages.TestStep[] = []\n\n    this.identifyHookSteps(\n      pickleId,\n      (hook) => hookSteps.push(hook),\n      () => null\n    )\n    return hookSteps\n  }\n\n  public getAfterHookSteps(pickleId: string): readonly messages.TestStep[] {\n    const hookSteps: messages.TestStep[] = []\n\n    this.identifyHookSteps(\n      pickleId,\n      () => null,\n      (hook) => hookSteps.push(hook)\n    )\n    return hookSteps\n  }\n\n  private identifyHookSteps(\n    pickleId: string,\n    onBeforeHookFound: (hook: messages.TestStep) => void,\n    onAfterHookFound: (hook: messages.TestStep) => void\n  ): void {\n    const testCase = this.testCaseByPickleId.get(pickleId)\n\n    if (!testCase) {\n      return\n    }\n\n    let pickleStepFound = false\n\n    for (const step of testCase.testSteps) {\n      if (step.hookId) {\n        pickleStepFound ? onAfterHookFound(step) : onBeforeHookFound(step)\n      } else {\n        pickleStepFound = true\n      }\n    }\n  }\n\n  public getTestStepResults(testStepId: string): messages.TestStepResult[] {\n    return this.testStepResultsbyTestStepId.get(testStepId)\n  }\n\n  public getStatusCounts(\n    pickleIds: readonly string[]\n  ): Partial<Record<messages.TestStepResultStatus, number>> {\n    const result: Partial<Record<messages.TestStepResultStatus, number>> = {}\n    for (const pickleId of pickleIds) {\n      const testStepResult = getWorstTestStepResult(this.getPickleTestStepResults([pickleId]))\n      const count = result[testStepResult.status] || 0\n      result[testStepResult.status] = count + 1\n    }\n    return result\n  }\n\n  /* new common interface with Java starts here */\n\n  public countMostSevereTestStepResultStatus(): Record<TestStepResultStatus, number> {\n    const result: Record<TestStepResultStatus, number> = {\n      [TestStepResultStatus.AMBIGUOUS]: 0,\n      [TestStepResultStatus.FAILED]: 0,\n      [TestStepResultStatus.PASSED]: 0,\n      [TestStepResultStatus.PENDING]: 0,\n      [TestStepResultStatus.SKIPPED]: 0,\n      [TestStepResultStatus.UNDEFINED]: 0,\n      [TestStepResultStatus.UNKNOWN]: 0,\n    }\n    for (const testCaseStarted of this.findAllTestCaseStarted()) {\n      const mostSevereResult = this.findTestStepFinishedAndTestStepBy(testCaseStarted)\n        .map(([testStepFinished]) => testStepFinished.testStepResult)\n        .sort(comparatorByStatus)\n        .at(-1)\n      if (mostSevereResult) {\n        result[mostSevereResult.status]++\n      }\n    }\n    return result\n  }\n\n  public countTestCasesStarted(): number {\n    return this.findAllTestCaseStarted().length\n  }\n\n  public findAllPickles(): ReadonlyArray<Pickle> {\n    const pickles = [...this.pickleById.values()]\n    return pickles.sort(comparatorById)\n  }\n\n  public findAllPickleSteps(): ReadonlyArray<PickleStep> {\n    const pickleSteps = [...this.pickleStepById.values()]\n    return pickleSteps.sort(comparatorById)\n  }\n\n  public findAllTestCaseStarted(): ReadonlyArray<TestCaseStarted> {\n    return this.testCaseStarted.filter((testCaseStarted) => {\n      const testCaseFinished = this.testCaseFinishedByTestCaseStartedId.get(testCaseStarted.id)\n      // only include if not yet finished OR won't be retried\n      return !testCaseFinished?.willBeRetried\n    })\n  }\n\n  public findAllTestCaseStartedGroupedByFeature(): Map<Feature | undefined, ReadonlyArray<TestCaseStarted>> {\n    const results = new Map();\n    this.findAllTestCaseStarted()\n        .map(testCaseStarted => ([this.findLineageBy(testCaseStarted), testCaseStarted] as const))\n        .sort(([a], [b]) => comparatorBy(a.gherkinDocument, b.gherkinDocument, \"uri\"))\n        .forEach(([{feature}, testCaseStarted]) => {\n          results.set(feature, [...results.get(feature) ?? [], testCaseStarted])\n        })\n    return results\n  }\n\n  public findAllTestSteps(): ReadonlyArray<TestStep> {\n    const testSteps = [...this.testStepById.values()]\n    return testSteps.sort(comparatorById)\n  }\n\n  public findFeatureBy(testCaseStarted: TestCaseStarted): Feature | undefined {\n    return this.findLineageBy(testCaseStarted)?.feature\n  }\n\n  public findMostSevereTestStepResultBy(testCaseStarted: TestCaseStarted): TestStepResult | undefined {\n    return this.findTestStepFinishedAndTestStepBy(testCaseStarted)\n      .map(([testStepFinished]) => testStepFinished.testStepResult)\n      .sort(comparatorByStatus)\n      .at(-1)\n  }\n\n  public findNameOf(pickle: Pickle, namingStrategy: NamingStrategy): string {\n    const lineage = this.findLineageBy(pickle)\n    return lineage ? namingStrategy.reduce(lineage, pickle) : pickle.name\n  }\n\n  public findPickleBy(testCaseStarted: TestCaseStarted): Pickle | undefined {\n    const testCase = this.findTestCaseBy(testCaseStarted)\n    assert.ok(testCase, 'Expected to find TestCase from TestCaseStarted')\n    return this.pickleById.get(testCase.pickleId)\n  }\n\n  public findPickleStepBy(testStep: TestStep): PickleStep | undefined {\n    assert.ok(testStep.pickleStepId, 'Expected TestStep to have a pickleStepId')\n    return this.pickleStepById.get(testStep.pickleStepId)\n  }\n\n  public findStepBy(pickleStep: PickleStep): Step | undefined {\n    const [astNodeId] = pickleStep.astNodeIds\n    assert.ok(astNodeId, 'Expected PickleStep to have an astNodeId')\n    return this.stepById.get(astNodeId)\n  }\n\n  public findTestCaseBy(testCaseStarted: TestCaseStarted): TestCase | undefined {\n    return this.testCaseById.get(testCaseStarted.testCaseId)\n  }\n\n  public findTestCaseDurationBy(testCaseStarted: TestCaseStarted): Duration | undefined {\n    const testCaseFinished = this.findTestCaseFinishedBy(testCaseStarted)\n    if (!testCaseFinished) {\n      return undefined\n    }\n    return TimeConversion.millisecondsToDuration(\n        TimeConversion.timestampToMillisecondsSinceEpoch(testCaseFinished.timestamp) -\n        TimeConversion.timestampToMillisecondsSinceEpoch(testCaseStarted.timestamp)\n    )\n  }\n\n  public findTestCaseFinishedBy(testCaseStarted: TestCaseStarted): TestCaseFinished | undefined {\n    return this.testCaseFinishedByTestCaseStartedId.get(testCaseStarted.id)\n  }\n\n  public findTestRunDuration(): Duration | undefined {\n    if (!this.testRunStarted || !this.testRunFinished) {\n      return undefined\n    }\n    return TimeConversion.millisecondsToDuration(\n        TimeConversion.timestampToMillisecondsSinceEpoch(this.testRunFinished.timestamp) -\n        TimeConversion.timestampToMillisecondsSinceEpoch(this.testRunStarted.timestamp)\n    )\n  }\n\n  public findTestRunFinished(): TestRunFinished | undefined {\n    return this.testRunFinished\n  }\n\n  public findTestRunStarted(): TestRunStarted | undefined {\n    return this.testRunStarted\n  }\n\n  public findTestStepBy(testStepFinished: TestStepFinished): TestStep | undefined {\n    return this.testStepById.get(testStepFinished.testStepId)\n  }\n\n  public findTestStepsFinishedBy(testCaseStarted: TestCaseStarted): ReadonlyArray<TestStepFinished> {\n    // multimaps `get` implements `getOrDefault([])` behaviour internally\n    return [...this.testStepFinishedByTestCaseStartedId.get(testCaseStarted.id)]\n  }\n\n  public findTestStepFinishedAndTestStepBy(\n      testCaseStarted: TestCaseStarted\n  ): ReadonlyArray<[TestStepFinished, TestStep]> {\n    return this.testStepFinishedByTestCaseStartedId\n        .get(testCaseStarted.id)\n        .map((testStepFinished) => {\n          const testStep = this.findTestStepBy(testStepFinished)\n          assert.ok(testStep, 'Expected to find TestStep by TestStepFinished')\n          return [testStepFinished, testStep]\n        })\n  }\n\n  private findLineageBy(element: Pickle | TestCaseStarted) {\n    const pickle = \"testCaseId\" in element ? this.findPickleBy(element) : element\n    const deepestAstNodeId = pickle.astNodeIds.at(-1)\n    assert.ok(deepestAstNodeId, 'Expected Pickle to have at least one astNodeId')\n    return this.lineageById.get(deepestAstNodeId)\n  }\n}\n"]}