{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../src/runtime/worker.ts"],"names":[],"mappings":";;;;;;AAIA,0EAA+C;AAC/C,uCAAgE;AAChE,6DAA4E;AAG5E,MAAa,MAAM;IAIE;IACA;IACA;IACA;IACA;IAPF,eAAe,CAAkB;IAElD,YACmB,QAA4B,EAC5B,gBAA8B,EAC9B,KAAwB,EACxB,OAAuB,EACvB,kBAAsC;QAJtC,aAAQ,GAAR,QAAQ,CAAoB;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAc;QAC9B,UAAK,GAAL,KAAK,CAAmB;QACxB,YAAO,GAAP,OAAO,CAAgB;QACvB,uBAAkB,GAAlB,kBAAkB,CAAoB;QAEvD,IAAI,CAAC,eAAe,GAAG,IAAA,wCAAmB,EACxC,IAAI,CAAC,OAAO,CAAC,MAAM,EACnB,IAAI,CAAC,kBAAkB,CAAC,cAAc,EACtC,IAAI,CAAC,OAAO,CAAC,eAAe,EAC5B,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;YACjB,IAAI,OAAO,GAAG,GAAG,IAAI,eAAe,CAAA;YACpC,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO,IAAI,cAAc,IAAI,CAAC,QAAQ,EAAE,CAAA;aACzC;YACD,OAAO,IAAI,sBAAsB,QAAQ,EAAE,CAAA;YAC3C,OAAO,OAAO,CAAA;QAChB,CAAC,CACF,CAAA;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,MAAM,IAAI,CAAC,eAAe,CACxB,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,EACpD,aAAa,CACd,CAAA;IACH,CAAC;IAED,KAAK,CAAC,WAAW,CACf,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAqB,EACxD,OAAgB;QAEhB,MAAM,cAAc,GAAG,IAAI,0BAAc,CAAC;YACxC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,eAAe;YACf,MAAM;YACN,QAAQ;YACR,OAAO,EAAE,IAAA,0BAAgB,EAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC;YAC/C,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC;YAC/D,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB;YACjD,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;SAC9C,CAAC,CAAA;QAEF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,EAAE,CAAA;QAEzC,OAAO,CAAC,IAAA,4BAAkB,EAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;IAClD,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,IAAI,CAAC,eAAe,CACxB,IAAI,CAAC,kBAAkB,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EACtE,aAAa,CACd,CAAA;IACH,CAAC;CACF;AA7DD,wBA6DC","sourcesContent":["import { EventEmitter } from 'node:events'\nimport { IdGenerator } from '@cucumber/messages'\nimport { AssembledTestCase } from '../assemble'\nimport { SupportCodeLibrary } from '../support_code_library_builder/types'\nimport TestCaseRunner from './test_case_runner'\nimport { retriesForPickle, shouldCauseFailure } from './helpers'\nimport { makeRunTestRunHooks, RunsTestRunHooks } from './run_test_run_hooks'\nimport { RuntimeOptions } from './index'\n\nexport class Worker {\n  private readonly runTestRunHooks: RunsTestRunHooks\n\n  constructor(\n    private readonly workerId: string | undefined,\n    private readonly eventBroadcaster: EventEmitter,\n    private readonly newId: IdGenerator.NewId,\n    private readonly options: RuntimeOptions,\n    private readonly supportCodeLibrary: SupportCodeLibrary\n  ) {\n    this.runTestRunHooks = makeRunTestRunHooks(\n      this.options.dryRun,\n      this.supportCodeLibrary.defaultTimeout,\n      this.options.worldParameters,\n      (name, location) => {\n        let message = `${name} hook errored`\n        if (this.workerId) {\n          message += ` on worker ${this.workerId}`\n        }\n        message += `, process exiting: ${location}`\n        return message\n      }\n    )\n  }\n\n  async runBeforeAllHooks() {\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.beforeTestRunHookDefinitions,\n      'a BeforeAll'\n    )\n  }\n\n  async runTestCase(\n    { gherkinDocument, pickle, testCase }: AssembledTestCase,\n    failing: boolean\n  ): Promise<boolean> {\n    const testCaseRunner = new TestCaseRunner({\n      workerId: this.workerId,\n      eventBroadcaster: this.eventBroadcaster,\n      newId: this.newId,\n      gherkinDocument,\n      pickle,\n      testCase,\n      retries: retriesForPickle(pickle, this.options),\n      skip: this.options.dryRun || (this.options.failFast && failing),\n      filterStackTraces: this.options.filterStacktraces,\n      supportCodeLibrary: this.supportCodeLibrary,\n      worldParameters: this.options.worldParameters,\n    })\n\n    const status = await testCaseRunner.run()\n\n    return !shouldCauseFailure(status, this.options)\n  }\n\n  async runAfterAllHooks() {\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.afterTestRunHookDefinitions.slice(0).reverse(),\n      'an AfterAll'\n    )\n  }\n}\n"]}