{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../src/runtime/parallel/worker.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'node:events'\nimport { pathToFileURL } from 'node:url'\nimport { register } from 'node:module'\nimport { Envelope, IdGenerator } from '@cucumber/messages'\nimport supportCodeLibraryBuilder from '../../support_code_library_builder'\nimport { SupportCodeLibrary } from '../../support_code_library_builder/types'\nimport tryRequire from '../../try_require'\nimport { Worker } from '../worker'\nimport { RuntimeOptions } from '../index'\nimport {\n  WorkerToCoordinatorEvent,\n  CoordinatorToWorkerCommand,\n  InitializeCommand,\n  RunCommand,\n} from './types'\n\nconst { uuid } = IdGenerator\n\ntype IExitFunction = (exitCode: number, error?: Error, message?: string) => void\ntype IMessageSender = (command: WorkerToCoordinatorEvent) => void\n\nexport class ChildProcessWorker {\n  private readonly cwd: string\n  private readonly exit: IExitFunction\n\n  private readonly id: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly newId: IdGenerator.NewId\n  private readonly sendMessage: IMessageSender\n  private options: RuntimeOptions\n  private supportCodeLibrary: SupportCodeLibrary\n  private worker: Worker\n\n  constructor({\n    cwd,\n    exit,\n    id,\n    sendMessage,\n  }: {\n    cwd: string\n    exit: IExitFunction\n    id: string\n    sendMessage: IMessageSender\n  }) {\n    this.id = id\n    this.newId = uuid()\n    this.cwd = cwd\n    this.exit = exit\n    this.sendMessage = sendMessage\n    this.eventBroadcaster = new EventEmitter()\n    this.eventBroadcaster.on('envelope', (envelope: Envelope) =>\n      this.sendMessage({ type: 'ENVELOPE', envelope })\n    )\n  }\n\n  async initialize({\n    supportCodeCoordinates,\n    supportCodeIds,\n    options,\n  }: InitializeCommand): Promise<void> {\n    supportCodeLibraryBuilder.reset(\n      this.cwd,\n      this.newId,\n      supportCodeCoordinates\n    )\n    supportCodeCoordinates.requireModules.map((module) => tryRequire(module))\n    supportCodeCoordinates.requirePaths.map((module) => tryRequire(module))\n    for (const specifier of supportCodeCoordinates.loaders) {\n      register(specifier, pathToFileURL('./'))\n    }\n    for (const path of supportCodeCoordinates.importPaths) {\n      await import(pathToFileURL(path).toString())\n    }\n    this.supportCodeLibrary = supportCodeLibraryBuilder.finalize(supportCodeIds)\n\n    this.options = options\n    this.worker = new Worker(\n      this.id,\n      this.eventBroadcaster,\n      this.newId,\n      this.options,\n      this.supportCodeLibrary\n    )\n    await this.worker.runBeforeAllHooks()\n    this.sendMessage({ type: 'READY' })\n  }\n\n  async finalize(): Promise<void> {\n    await this.worker.runAfterAllHooks()\n    this.exit(0)\n  }\n\n  async receiveMessage(command: CoordinatorToWorkerCommand): Promise<void> {\n    switch (command.type) {\n      case 'INITIALIZE':\n        await this.initialize(command)\n        break\n      case 'RUN':\n        await this.runTestCase(command)\n        break\n      case 'FINALIZE':\n        await this.finalize()\n        break\n    }\n  }\n\n  async runTestCase(command: RunCommand): Promise<void> {\n    const success = await this.worker.runTestCase(\n      command.assembledTestCase,\n      command.failing\n    )\n    this.sendMessage({\n      type: 'FINISHED',\n      success,\n    })\n  }\n}\n"]}