"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages = __importStar(require("@cucumber/messages"));
const messages_1 = require("@cucumber/messages");
const multimaps_1 = require("@teppeis/multimaps");
const helpers_1 = require("./helpers");
class Query {
    constructor() {
        this.testStepResultByPickleId = new multimaps_1.ArrayMultimap();
        this.testStepResultsByPickleStepId = new multimaps_1.ArrayMultimap();
        this.testCaseByPickleId = new Map();
        this.pickleIdByTestStepId = new Map();
        this.pickleStepIdByTestStepId = new Map();
        this.testStepResultsbyTestStepId = new multimaps_1.ArrayMultimap();
        this.testStepIdsByPickleStepId = new multimaps_1.ArrayMultimap();
        this.hooksById = new Map();
        this.attachmentsByTestStepId = new multimaps_1.ArrayMultimap();
        this.stepMatchArgumentsListsByPickleStepId = new Map();
        this.testCaseStarted = [];
        this.lineageById = new Map();
        this.stepById = new Map();
        this.pickleById = new Map();
        this.pickleStepById = new Map();
        this.testCaseById = new Map();
        this.testStepById = new Map();
        this.testCaseFinishedByTestCaseStartedId = new Map();
        this.testStepFinishedByTestCaseStartedId = new multimaps_1.ArrayMultimap();
    }
    update(envelope) {
        if (envelope.gherkinDocument) {
            this.updateGherkinDocument(envelope.gherkinDocument);
        }
        if (envelope.pickle) {
            this.updatePickle(envelope.pickle);
        }
        if (envelope.hook) {
            this.hooksById.set(envelope.hook.id, envelope.hook);
        }
        if (envelope.testRunStarted) {
            this.testRunStarted = envelope.testRunStarted;
        }
        if (envelope.testCase) {
            this.updateTestCase(envelope.testCase);
        }
        if (envelope.testCaseStarted) {
            this.updateTestCaseStarted(envelope.testCaseStarted);
        }
        if (envelope.attachment) {
            this.attachmentsByTestStepId.put(envelope.attachment.testStepId, envelope.attachment);
        }
        if (envelope.testStepFinished) {
            this.updateTestStepFinished(envelope.testStepFinished);
        }
        if (envelope.testCaseFinished) {
            this.updateTestCaseFinished(envelope.testCaseFinished);
        }
        if (envelope.testRunFinished) {
            this.testRunFinished = envelope.testRunFinished;
        }
    }
    updateGherkinDocument(gherkinDocument) {
        if (gherkinDocument.feature) {
            this.updateFeature(gherkinDocument.feature, {
                gherkinDocument,
            });
        }
    }
    updateFeature(feature, lineage) {
        feature.children.forEach((featureChild) => {
            if (featureChild.background) {
                this.updateSteps(featureChild.background.steps);
            }
            if (featureChild.scenario) {
                this.updateScenario(featureChild.scenario, Object.assign(Object.assign({}, lineage), { feature }));
            }
            if (featureChild.rule) {
                this.updateRule(featureChild.rule, Object.assign(Object.assign({}, lineage), { feature }));
            }
        });
    }
    updateRule(rule, lineage) {
        rule.children.forEach((ruleChild) => {
            if (ruleChild.background) {
                this.updateSteps(ruleChild.background.steps);
            }
            if (ruleChild.scenario) {
                this.updateScenario(ruleChild.scenario, Object.assign(Object.assign({}, lineage), { rule }));
            }
        });
    }
    updateScenario(scenario, lineage) {
        this.lineageById.set(scenario.id, Object.assign(Object.assign({}, lineage), { scenario }));
        scenario.examples.forEach((examples, examplesIndex) => {
            this.lineageById.set(examples.id, Object.assign(Object.assign({}, lineage), { scenario,
                examples,
                examplesIndex }));
            examples.tableBody.forEach((example, exampleIndex) => {
                this.lineageById.set(example.id, Object.assign(Object.assign({}, lineage), { scenario,
                    examples,
                    examplesIndex,
                    example,
                    exampleIndex }));
            });
        });
        this.updateSteps(scenario.steps);
    }
    updateSteps(steps) {
        steps.forEach((step) => this.stepById.set(step.id, step));
    }
    updatePickle(pickle) {
        this.pickleById.set(pickle.id, pickle);
        pickle.steps.forEach((pickleStep) => this.pickleStepById.set(pickleStep.id, pickleStep));
    }
    updateTestCase(testCase) {
        this.testCaseById.set(testCase.id, testCase);
        this.testCaseByPickleId.set(testCase.pickleId, testCase);
        testCase.testSteps.forEach((testStep) => {
            this.testStepById.set(testStep.id, testStep);
            this.pickleIdByTestStepId.set(testStep.id, testCase.pickleId);
            this.pickleStepIdByTestStepId.set(testStep.id, testStep.pickleStepId);
            this.testStepIdsByPickleStepId.put(testStep.pickleStepId, testStep.id);
            this.stepMatchArgumentsListsByPickleStepId.set(testStep.pickleStepId, testStep.stepMatchArgumentsLists);
        });
    }
    updateTestCaseStarted(testCaseStarted) {
        this.testCaseStarted.push(testCaseStarted);
        /*
        when a test case attempt starts besides the first one, clear all existing results
        and attachments for that test case, so we always report on the latest attempt
        (applies to legacy pickle-oriented query methods only)
         */
        const testCase = this.testCaseById.get(testCaseStarted.testCaseId);
        this.testStepResultByPickleId.delete(testCase.pickleId);
        for (const testStep of testCase.testSteps) {
            this.testStepResultsByPickleStepId.delete(testStep.pickleStepId);
            this.testStepResultsbyTestStepId.delete(testStep.id);
            this.attachmentsByTestStepId.delete(testStep.id);
        }
    }
    updateTestStepFinished(testStepFinished) {
        this.testStepFinishedByTestCaseStartedId.put(testStepFinished.testCaseStartedId, testStepFinished);
        const pickleId = this.pickleIdByTestStepId.get(testStepFinished.testStepId);
        this.testStepResultByPickleId.put(pickleId, testStepFinished.testStepResult);
        const testStep = this.testStepById.get(testStepFinished.testStepId);
        this.testStepResultsByPickleStepId.put(testStep.pickleStepId, testStepFinished.testStepResult);
        this.testStepResultsbyTestStepId.put(testStep.id, testStepFinished.testStepResult);
    }
    updateTestCaseFinished(testCaseFinished) {
        this.testCaseFinishedByTestCaseStartedId.set(testCaseFinished.testCaseStartedId, testCaseFinished);
    }
    /**
     * Gets all the results for multiple pickle steps
     * @param pickleStepIds
     */
    getPickleStepTestStepResults(pickleStepIds) {
        if (pickleStepIds.length === 0) {
            return [
                {
                    status: messages.TestStepResultStatus.UNKNOWN,
                    duration: messages.TimeConversion.millisecondsToDuration(0),
                },
            ];
        }
        return pickleStepIds.reduce((testStepResults, pickleId) => {
            return testStepResults.concat(this.testStepResultsByPickleStepId.get(pickleId));
        }, []);
    }
    /**
     * Gets all the results for multiple pickles
     * @param pickleIds
     */
    getPickleTestStepResults(pickleIds) {
        if (pickleIds.length === 0) {
            return [
                {
                    status: messages.TestStepResultStatus.UNKNOWN,
                    duration: messages.TimeConversion.millisecondsToDuration(0),
                },
            ];
        }
        return pickleIds.reduce((testStepResults, pickleId) => {
            return testStepResults.concat(this.testStepResultByPickleId.get(pickleId));
        }, []);
    }
    /**
     * Gets all the attachments for multiple pickle steps
     * @param pickleStepIds
     */
    getPickleStepAttachments(pickleStepIds) {
        return this.getTestStepsAttachments(pickleStepIds.reduce((testStepIds, pickleStepId) => {
            return testStepIds.concat(this.testStepIdsByPickleStepId.get(pickleStepId));
        }, []));
    }
    getTestStepsAttachments(testStepIds) {
        return testStepIds.reduce((attachments, testStepId) => {
            return attachments.concat(this.attachmentsByTestStepId.get(testStepId));
        }, []);
    }
    /**
     * Get StepMatchArguments for a pickle step
     * @param pickleStepId
     */
    getStepMatchArgumentsLists(pickleStepId) {
        return this.stepMatchArgumentsListsByPickleStepId.get(pickleStepId);
    }
    getHook(hookId) {
        return this.hooksById.get(hookId);
    }
    getBeforeHookSteps(pickleId) {
        const hookSteps = [];
        this.identifyHookSteps(pickleId, (hook) => hookSteps.push(hook), () => null);
        return hookSteps;
    }
    getAfterHookSteps(pickleId) {
        const hookSteps = [];
        this.identifyHookSteps(pickleId, () => null, (hook) => hookSteps.push(hook));
        return hookSteps;
    }
    identifyHookSteps(pickleId, onBeforeHookFound, onAfterHookFound) {
        const testCase = this.testCaseByPickleId.get(pickleId);
        if (!testCase) {
            return;
        }
        let pickleStepFound = false;
        for (const step of testCase.testSteps) {
            if (step.hookId) {
                pickleStepFound ? onAfterHookFound(step) : onBeforeHookFound(step);
            }
            else {
                pickleStepFound = true;
            }
        }
    }
    getTestStepResults(testStepId) {
        return this.testStepResultsbyTestStepId.get(testStepId);
    }
    getStatusCounts(pickleIds) {
        const result = {};
        for (const pickleId of pickleIds) {
            const testStepResult = (0, messages_1.getWorstTestStepResult)(this.getPickleTestStepResults([pickleId]));
            const count = result[testStepResult.status] || 0;
            result[testStepResult.status] = count + 1;
        }
        return result;
    }
    /* new common interface with Java starts here */
    countMostSevereTestStepResultStatus() {
        const result = {
            [messages_1.TestStepResultStatus.AMBIGUOUS]: 0,
            [messages_1.TestStepResultStatus.FAILED]: 0,
            [messages_1.TestStepResultStatus.PASSED]: 0,
            [messages_1.TestStepResultStatus.PENDING]: 0,
            [messages_1.TestStepResultStatus.SKIPPED]: 0,
            [messages_1.TestStepResultStatus.UNDEFINED]: 0,
            [messages_1.TestStepResultStatus.UNKNOWN]: 0,
        };
        for (const testCaseStarted of this.findAllTestCaseStarted()) {
            const mostSevereResult = this.findTestStepFinishedAndTestStepBy(testCaseStarted)
                .map(([testStepFinished]) => testStepFinished.testStepResult)
                .sort(helpers_1.comparatorByStatus)
                .at(-1);
            if (mostSevereResult) {
                result[mostSevereResult.status]++;
            }
        }
        return result;
    }
    countTestCasesStarted() {
        return this.findAllTestCaseStarted().length;
    }
    findAllPickles() {
        const pickles = [...this.pickleById.values()];
        return pickles.sort(helpers_1.comparatorById);
    }
    findAllPickleSteps() {
        const pickleSteps = [...this.pickleStepById.values()];
        return pickleSteps.sort(helpers_1.comparatorById);
    }
    findAllTestCaseStarted() {
        return this.testCaseStarted.filter((testCaseStarted) => {
            const testCaseFinished = this.testCaseFinishedByTestCaseStartedId.get(testCaseStarted.id);
            // only include if not yet finished OR won't be retried
            return !(testCaseFinished === null || testCaseFinished === void 0 ? void 0 : testCaseFinished.willBeRetried);
        });
    }
    findAllTestCaseStartedGroupedByFeature() {
        const results = new Map();
        this.findAllTestCaseStarted()
            .map(testCaseStarted => [this.findLineageBy(testCaseStarted), testCaseStarted])
            .sort(([a], [b]) => (0, helpers_1.comparatorBy)(a.gherkinDocument, b.gherkinDocument, "uri"))
            .forEach(([{ feature }, testCaseStarted]) => {
            var _a;
            results.set(feature, [...(_a = results.get(feature)) !== null && _a !== void 0 ? _a : [], testCaseStarted]);
        });
        return results;
    }
    findAllTestSteps() {
        const testSteps = [...this.testStepById.values()];
        return testSteps.sort(helpers_1.comparatorById);
    }
    findFeatureBy(testCaseStarted) {
        var _a;
        return (_a = this.findLineageBy(testCaseStarted)) === null || _a === void 0 ? void 0 : _a.feature;
    }
    findMostSevereTestStepResultBy(testCaseStarted) {
        return this.findTestStepFinishedAndTestStepBy(testCaseStarted)
            .map(([testStepFinished]) => testStepFinished.testStepResult)
            .sort(helpers_1.comparatorByStatus)
            .at(-1);
    }
    findNameOf(pickle, namingStrategy) {
        const lineage = this.findLineageBy(pickle);
        return lineage ? namingStrategy.reduce(lineage, pickle) : pickle.name;
    }
    findPickleBy(testCaseStarted) {
        const testCase = this.findTestCaseBy(testCaseStarted);
        helpers_1.assert.ok(testCase, 'Expected to find TestCase from TestCaseStarted');
        return this.pickleById.get(testCase.pickleId);
    }
    findPickleStepBy(testStep) {
        helpers_1.assert.ok(testStep.pickleStepId, 'Expected TestStep to have a pickleStepId');
        return this.pickleStepById.get(testStep.pickleStepId);
    }
    findStepBy(pickleStep) {
        const [astNodeId] = pickleStep.astNodeIds;
        helpers_1.assert.ok(astNodeId, 'Expected PickleStep to have an astNodeId');
        return this.stepById.get(astNodeId);
    }
    findTestCaseBy(testCaseStarted) {
        return this.testCaseById.get(testCaseStarted.testCaseId);
    }
    findTestCaseDurationBy(testCaseStarted) {
        const testCaseFinished = this.findTestCaseFinishedBy(testCaseStarted);
        if (!testCaseFinished) {
            return undefined;
        }
        return messages_1.TimeConversion.millisecondsToDuration(messages_1.TimeConversion.timestampToMillisecondsSinceEpoch(testCaseFinished.timestamp) -
            messages_1.TimeConversion.timestampToMillisecondsSinceEpoch(testCaseStarted.timestamp));
    }
    findTestCaseFinishedBy(testCaseStarted) {
        return this.testCaseFinishedByTestCaseStartedId.get(testCaseStarted.id);
    }
    findTestRunDuration() {
        if (!this.testRunStarted || !this.testRunFinished) {
            return undefined;
        }
        return messages_1.TimeConversion.millisecondsToDuration(messages_1.TimeConversion.timestampToMillisecondsSinceEpoch(this.testRunFinished.timestamp) -
            messages_1.TimeConversion.timestampToMillisecondsSinceEpoch(this.testRunStarted.timestamp));
    }
    findTestRunFinished() {
        return this.testRunFinished;
    }
    findTestRunStarted() {
        return this.testRunStarted;
    }
    findTestStepBy(testStepFinished) {
        return this.testStepById.get(testStepFinished.testStepId);
    }
    findTestStepsFinishedBy(testCaseStarted) {
        // multimaps `get` implements `getOrDefault([])` behaviour internally
        return [...this.testStepFinishedByTestCaseStartedId.get(testCaseStarted.id)];
    }
    findTestStepFinishedAndTestStepBy(testCaseStarted) {
        return this.testStepFinishedByTestCaseStartedId
            .get(testCaseStarted.id)
            .map((testStepFinished) => {
            const testStep = this.findTestStepBy(testStepFinished);
            helpers_1.assert.ok(testStep, 'Expected to find TestStep by TestStepFinished');
            return [testStepFinished, testStep];
        });
    }
    findLineageBy(element) {
        const pickle = "testCaseId" in element ? this.findPickleBy(element) : element;
        const deepestAstNodeId = pickle.astNodeIds.at(-1);
        helpers_1.assert.ok(deepestAstNodeId, 'Expected Pickle to have at least one astNodeId');
        return this.lineageById.get(deepestAstNodeId);
    }
}
exports.default = Query;
//# sourceMappingURL=Query.js.map